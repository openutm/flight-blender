---
openapi: '3.0.0'
info:
  title: 'Flight Blender API specification'
  description: |-
    This OpenAPI specification defines all interfaces for Flight Blender, including endpoints for submitting raw air traffic observations, geo-fencing data, flight declarations, ASTM-compliant network Remote-ID, and U-Space Flight Authorisation (Strategic Deconfliction).

    Unless explicitly documented, any fields present in a request but not defined in the API schema will be ignored by the server implementation.
  version: '1.0.0'
servers:
  - url: 'https://virtserver.swaggerhub.com/cygnus2936/flight-Flight Blender/1.0.0'
    description: 'Flight Blender API'
security:
  - AuthFromPassport:
      - 'flight_blender.write'
      - 'flight_blender.read'
  - AuthFromAuthorizationAuthority:
      - utm.strategic_coordination
      - utm.constraint_management
      - utm.constraint_processing
      - utm.conformance_monitoring_sa
      - utm.availability_arbitration
      - rid.display_provider
      - rid.service_provider
paths:
  /ping:
    get:
      summary: 'Server heartbeat operation'

      description: 'This operation is a ping to check if the server is running '

      security: []
      responses:
        '200':
          description: 'Server running normally'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PongResponse'
        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'
  
  /surveillance_monitoring_operations/start_stop_surveillance_heartbeat_track:
    put:
      summary: 'Start or stop surveillance heartbeat track'
      description: 'This operation allows starting or stopping the surveillance heartbeat track for monitoring purposes.'
      security:
        - AuthFromPassport: [flight_blender.write]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [start, stop]
                  description: 'Action to perform: start or stop the surveillance heartbeat track.'
              required:
                - action
      responses:
        '200':
          description: 'Action performed successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Surveillance heartbeat track started/stopped successfully'
        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'
      tags:
        - surveillance-sdsp
    get:
      summary: 'Surveillance service status'
      description: 'Retrieve the current operational status of the surveillance monitoring service.'
      security:
        - AuthFromPassport: [flight_blender.read]
      responses:
        '200':
          description: Surveillance service status retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthMessage'
        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'
      tags:
        - surveillance-sdsp
  /signing_public_key:
    get:
      summary: 'Flight Blender Signing Public Key'

      description: 'Get the public key used to verify signed responses from Flight Blender. When Flight Blender will sign responses and this endpoint will provide a public key that can be used to verify signatures of messages signed by Flight Blender'

      security: []
      responses:
        '200':
          description: 'Public Key Retrieved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWKSResponse'
        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'
      tags:
        - message-signing-verification
  /rid/capabilities:
    get:
      security:
      - AuthFromPassport:
          - flight_blender.read
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RIDCapabilitiesResponse'
          description: >-
            The capabilities as far as support of ASTM RID standard for Network Remote ID data exchange is concerned.
        '401':
          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        '403':
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
      summary: RID capabilities
      description: Retrieve the capabilities of the USS
      tags:
        - rid

  /rid/create_dss_subscription:
    put:
      summary: 'Create a Remote ID Subscription in the DSS'
      security:
        - AuthFromPassport: [flight_blender.write]
      description:
        "Create a subscription for an airspace to receive updates of operations in a volume of interest. After extents are submitted, Flight Blender will \
        \ get a appropriate token and create a subscription with a DSS instance, the DSS url needs to be confirmed / set as a part of Flight Blender setup. It will then poll flights through the Flights URLs provided by the DSS "
      parameters:
        - name: view
          description:
            'The area of this view: lat1,lng1,lat2,lng2.  Size may not exceed a diagonal length specified in the standard.  The view is the smallest box
            bounded by the provided corner points.'
          schema:
            type: string
            example: 29.97816,31.13296,29.98025,31.13535
          in: query
          required: true

      responses:
        '200':
          description: Subscription Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionCreated'
        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'
      tags:
        - rid

  /rid/uss/identification_service_areas/{id}:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutIdentificationServiceAreaNotificationParameters'
        required: true

      summary: Notifications of change to Identification Service Areas.
      tags:
      - rid
      operationId: postIdentificationServiceArea
      responses:
        204:
          description: Information for Identification Service Area was updated successfully.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more parameters were missing or invalid.
            * The Identification Service Area information could not be parsed, or contains illegal data.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint.
            * The client identified in the access token is not the owner of this Entity according to the receiving client's records.
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The Entity version specified in this message is identical to
            a previously-received notification and the Entity is different.
      security:
      - AuthFromAuthorizationAuthority:
        - dss.write.identification_service_areas
      description: 'Hosted by a remote ID display provider using Subscriptions: publish
        new full information of an Identification Service Area to the host of this
        endpoint (usually because of instructions from the DSS triggered by a subscription).'

    parameters:
    - name: id
      description: EntityUUID of the Identification Service Area.
      schema:
        $ref: '#/components/schemas/EntityUUID'
      in: path
      required: true

  /flight_stream/set_telemetry:
    put:
      tags:
      - telemetry
      summary: 'Add Telemetry observation(s)'
      security:
        - AuthFromPassport: [flight_blender.write]
      description:
        "Submit data that is compliant with ASTM RemoteID from the vehicle / GCS into Flight Blender, after submission, Flight Blender will \
        \ normalize the data and eventually send it to Flight Spotlight or make it available to other interfaces e.g. Network RID. A single or multiple flight states can be submitted at a given time."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                observations:
                  $ref: '#/components/schemas/FlightRIDData'

      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteIDDataProcessed'
          description: Remote ID data successfully submitted and processed.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more parameters were missing or invalid.
            * The Identification Service Area information could not be parsed, or contains illegal data.

  /flight_stream/set_signed_telemetry:
    put:
      tags:
      - signed-rid
      summary: 'Add Signed Remote-ID observation(s)'
      security: []
      description:
        "Submit data that is compliant with ASTM RemoteID from the vehicle into Flight Blender, after submission, Flight Blender will \
        \ normalize the data and eventually send it to Flight Spotlight or make it available to other interfaces. A single or multiple flight states can be submitted at a given time. This endpoint does not require a token but the requests need to be signed else they will be rejected. "
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                observations:
                  $ref: '#/components/schemas/FlightRIDData'

      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteIDDataProcessed'
          description: Remote ID data successfully submitted and processed.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more parameters were missing or invalid.
            * The Identification Service Area information could not be parsed, or contains illegal data.

  /rid/get_rid_data/{subscription_id}:
    get:
      summary: 'Get flight data compliant with network remote id given a subscription id'
      security:
        - AuthFromPassport: [flight_blender.read]
      description:
        "By default Flight Blender sends flight data to Flight Spotlight as a scheduled job (push) every x seconds (which can be configured) \
        \ use this endpoint if you plan to implement polling mechanism (pull). This endpoint for e.g. is used in the RID Qualifier or can be to get flights if you are using a polling mechanism for your display client"
      parameters:
        - in: path
          name: subscription_id
          description: 'This is the ID of the subscription'
          schema:
            type: string
            format: uuid
          required: true

      responses:
        '200':
          description: A list of aircraft observations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlightFeedJSON'

        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'
      tags:
        - rid
  /rid/user_notifications:
      get:
        operationId: QueryUserNotifications
        security:
          - TestAuth:
              - rid.inject_test_data
        parameters:
          - name: after
            description: >-
              Do not include any notifications observed before this time.
              The property 'observed_at' in UserNotification is to be used for comparison.
            schema:
              type: string
              format: date-time
            example: '2024-04-22T16:36:50.52Z'
            in: query
            required: true
          - name: before
            description: >-
              Do not include any notifications observed after this time.
              This time must be after the time specified in 'after' parameter.
              If not provided, then the value defaults to now.
              The property 'observed_at' in UserNotification is to be used for comparison.
            schema:
              type: string
              format: date-time
            example: '2024-04-22T16:41:50.52Z'
            in: query
            required: false
        responses:
          '200':
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/QueryUserNotificationsResponse'
            description: User notifications sent retrieved successfully.
          '400':
            description: The request was missing 'after' query parameter, or the request was otherwise invalid.
          '401':
            description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
          '403':
            description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
        summary: User notifications
        description: >-
          Returns the list of user notifications observed by the virtual user and applicable to the query parameters.
          The implementation of this endpoint requires that the user notifications be available for querying until the end of a test run.
          The user notifications should be available to be queried within 5 seconds of observation by the virtual user.
        tags:
          - rid-qualifier
  /rid/display_data:
    get:
      parameters:
        - name: view_port
          in: query
          description: 'The area of this view: lat1,lng1,lat2,lng2.  Size may not exceed a diagonal length specified in the standard.  The view is the smallest box bounded by the provided corner points.'
          schema:
            type: string
            example: 29.97816,31.13296,29.98025,31.13535

          required: true

      summary: 'Get remote id data for a given view bounding box'
      security:
        - AuthFromPassport: [flight_blender.read]
      description: 'This endpoint is used in the context of running the rid_qualifier tool in the DSS. Poll this endpoint to get current remote ID display data as would be visualized by a Display Application. '

      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDisplayDataResponse'
          description: Details about the requested flight were retrieved successfully.
        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'
      tags:
        - rid-qualifier

  /rid/tests/{test_id}:
    parameters:
      - examples:
          default:
            value: '2979bd18-7f06-441c-bda6-e82c841c35d6'
        name: test_id
        description: >-
          The ID of the test.
        schema:
          type: string
        in: path
        required: true
    put:
      tags:
        - rid-qualifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTestParameters'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeTestResponse'
          description: Requested test was created successfully.
        '409':
          description: Test already exists.
      operationId: CreateTest
      summary: Create test
      description: >-
        Request the creation of one or more logical flights based on injection of the provided test data.
        The host Service Provider's test data injector may modify fields, such as `details.id`, as necessary to work with their system.
        The host Service Provider's test data injector should modify as few fields as practical, and change modified fields as little as practical.
        The `injection_id` fields may not be modified.
      security:
        - AuthFromAuthorizationAuthority:
            - rid.inject_test_data
  /rid/tests/{test_id}/{version}:
    parameters:
      - examples:
          default:
            value: '2979bd18-7f06-441c-bda6-e82c841c35d6'
        name: test_id
        description: >-
          The ID of the test.
        schema:
          type: string
        in: path
        required: true
      - name: version
        description: >-
          Current version of the test.
        schema:
          type: string
        in: path
        required: true
    delete:
      tags:
        - rid-qualifier
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteTestResponse'
          description: Requested test was deleted successfully.
      operationId: DeleteTest
      summary: Delete test
      description: Remove all injected test data associated with this test from the host Service Provider's system under test.
      security:
        - AuthFromAuthorizationAuthority:
            - rid.inject_test_data
  /rid/display_data/{flight_id}:
    summary: A remote ID flight reported by a remote ID service provider.

    get:
      tags:
        - rid-qualifier

      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFlightDetailsResponse'
          description: Flight details were successfully retrieved.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'
          description: One or more input parameters were missing or invalid.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'
          description:
            Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'
          description:
            The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'
          description: The requested flight could not be found.
      security:
        - AuthFromAuthorizationAuthority:
            - dss.read.identification_service_areas
      summary: Get flight details
      description:
        Retrieve details of a flight from a remote ID service provider
        to meet remote ID requirements.
    parameters:
      - name: flight_id
        description:
          Remote ID flight ID for this flight; may be obtained in general
          /flights query.
        schema:
          $ref: '#/components/schemas/RIDFlightID'
        in: path
        required: true



  #
  # USS endpoints for reports
  #
  /uss/v1/reports:
    summary: Error reports of issues communicating with a peer USS.
    post:
      tags:
      - Reports
      - p2p_utm
      security:
      - Authority:
        - utm.strategic_coordination
      - Authority:
        - utm.constraint_processing
      - Authority:
        - utm.constraint_management
      - Authority:
        - utm.conformance_monitoring_sa
      - Authority:
        - utm.availability_arbitration
      summary: >-
        Notify USS of an error encountered that might otherwise go unnoticed.
      operationId: makeUssReport
      description: >-
        Endpoint to provide feedback (errors, etc.) that might otherwise go
        unnoticed by this USS.  This endpoint is used for all feedback related
        to operational intents and constraints.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorReport'
        required: true
      responses:
        '201':
          description: Report received and successfully archived.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorReport'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: >-
            * One or more parameters were missing or invalid.

            * The report could not be parsed, or contains unrecognized data.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: >-
            Bearer access token was not provided in Authorization header, token
            could not be decoded, or token was invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: >-
            * The access token was decoded successfully but did not include a
            scope appropriate to this endpoint.
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: >-
            The client issued too many requests in a short period of time.



  /uss/v1/operational_intents/{entityid}:
    summary: Query detailed information of an operational intent from submitted Flight Blender, this is used in the context of strategic deconfliction.
    parameters:
      - name: entityid
        description: EntityID for this operational intent.
        schema:
          $ref: '#/components/schemas/EntityID'
        in: path
        required: true
    get:
      tags:
        - uss
      security:
        - AuthFromAuthorizationAuthority:
            - utm.strategic_coordination
      summary: Retrieve the specified operational intent details
      description: >-
        Get details of an existing operational intent in Flight Blender.
      operationId: getOperationalIntentDetails
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOperationalIntentDetailsResponse'
          description: Operational intent details were retrieved successfully.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: >-
            Bearer access token was not provided in Authorization header, token
            could not be decoded, or token was invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: >-
            The access token was decoded successfully but did not include a
            scope appropriate to this endpoint.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: >-
            The client issued too many requests in a short period of time.

  /v1/uss/flights:
    summary: Basic operation details to meet remote ID requirements.

    description: Retrieve basic flight information from a remote ID service provider
        to meet remote ID requirements.  This endpoint will be polled by remote ID
        display providers to display basic aircraft activity near a user in real time.  All
        flights that have any recent positions (past [NetUasInAreaWindow] seconds)
        inside the requested view must be returned.
    get:
      tags:
      - rid
      summary: Get RID flight details
      operationId: GetRIDFlights
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFlightsResponse'
          description: Flight information was successfully retrieved.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested view is entirely outside any remote ID service
            provision areas (PositionReporting Entity volumes) this provider has.  A
            display provider receiving this response should discontinue polling for
            this endpoint for the view port requested until otherwise directed by
            DSS interactions.
        413:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested view rectangle was too large.
      security:
      - AuthFromAuthorizationAuthority:

        - dss.read.identification_service_areas

      parameters:
      - name: view
        description: 'The area of this view: lat1,lng1,lat2,lng2.  Size may not exceed
          a diagonal length specified in the standard.  The view is the smallest box
          bounded by the provided corner points.'
        schema:
          type: string
          example: 29.97816,31.13296,29.98025,31.13535
        in: query
        required: true
      - name: include_recent_positions
        description: |-
          If specified as true, include recent positions.  Otherwise, do not include recent positions.

          A display provider's first poll of this endpoint for a particular view will usually request recent positions while follow-up polls for that same view will usually not need to request recent positions.
        schema:
          type: boolean
        in: query


  /v1/uss/flights/{id}/details:
    summary: A remote ID flight reported by a remote ID service provider.
    get:

      tags:
      - uss
      operationId: getFlightDetails
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFlightDetailsResponse'
          description: Flight details were successfully retrieved.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested flight could not be found.
      security:
      - AuthFromAuthorizationAuthority:
        - dss.read.identification_service_areas
      summary: Retrieve details of a specific flight
      description: Retrieve details of a flight from a remote ID service provider
        to meet remote ID requirements.
    parameters:
    - name: id
      description: Remote ID flight ID for this flight; may be obtained in general
        /flights query.
      schema:
        $ref: '#/components/schemas/RIDFlightID'
      in: path
      required: true

  /flight_stream/set_air_traffic/{session_id}:
    post:
      parameters:
      - name: session_id
        in: path
        required: true
        description: A UUID string identifying the session id associated with observation.
        schema:
          type: string
      summary: 'Add Airtraffic observation(s)'
      security:
        - AuthFromPassport: [flight_blender.write]
      description:
        "Submit air traffic data into Flight Blender, after submission, Flight Blender will \
        \ normalize the data and eventually send it to Flight Spotlight or make it available to other interfaces. A single or multiple observations can be submitted at a given time. No Network Remote ID data should be uploaded from this endpoint."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                observations:
                  $ref: '#/components/schemas/FlightFeedJSON'

      responses:
        '201':
          description: 'Airtraffic data added'
        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'
      tags:
        - air-traffic

  /flight_stream/start_opensky_feed:
    get:
      parameters:
        - name: view_port
          in: query
          description: 'The area of this view: lat1,lng1,lat2,lng2.  Size may not exceed a diagonal length specified in the standard.  The view is the smallest box bounded by the provided corner points.'
          schema:
            type: string
            example: 29.97816,31.13296,29.98025,31.13535

          required: true

      summary: 'Start a stream of air-traffic data'
      security:
        - AuthFromPassport: [flight_blender.write]
      description:
        "Using this endpoint, you can start a stream of air-traffic observations for sixty seconds using the Opensky Network (https://opensky-network.org/).These observations are automatically submitted to Flight Spotlight for display"

      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenskiesNetworkDataRequestSuccessful'
        '201':
          description: 'Openskies Network stream started'
        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenskiesNetworkDataRequestError'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'
      tags:
        - air-traffic

  /flight_stream/get_air_traffic/{session_id}:
    get:
      parameters:
        - name: view
          in: query
          description: 'The area of this view: lat1,lng1,lat2,lng2.  Size may not exceed a diagonal length specified in the standard.  The view is the smallest box bounded by the provided corner points.'
          schema:
            type: string
            example: 29.97816,31.13296,29.98025,31.13535
          required: true

        - name: session_id
          in: path
          description: A UUID string identifying the session id associated with observation, if the session_id does not exist, observations received 20 seconds before now.
          schema:
            type: string
          required: true


      summary: 'Get Airtraffic observation(s)'
      security:
        - AuthFromPassport: [flight_blender.read]
      description:
        "Get all air traffic observations within Flight Blender for a view port. No Network Remote ID data will be provided from this endpoint."
      responses:
        '200':
          description: 'Airtraffic data retrieved'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlightFeedJSON'

        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'
      tags:
        - air-traffic
  /flight_declaration_ops/flight_declaration:
    get:
      summary: 'Get a list of all submitted flight declarations'
      security:
        - AuthFromPassport: [flight_blender.read]
      description: "Get a list of all Flight declarations in the database, if no start or end date is provided, Flight Blender will provide declarations for today"

      parameters:
        - name: view
          in: query
          description:
            'The area of this view: lat1,lng1,lat2,lng2.  Size may not exceed a diagonal length specified in the standard. The view is the smallest box
            bounded by the provided corner points.'
          schema:
            type: string
            example: 29.97816,31.13296,29.98025,31.13535
        - name: start_date
          in: query
          schema:
            type: string
            format: date
          description: >
            The start date for the report. Must be used together with `end_date`.
        - name: end_date
          in: query
          schema:
            type: string
            format: date
          description: >
            The end date for the report. Must be used together with `start_date`.
        - name: page
          in: query
          schema:
            type: number
          description: >
            Page to fetch.
        - name: page_size
          in: query
          schema:
            type: number
          description: >
            Amount of results per page.
      responses:
        '200':
          description: Get a list of declared operations, `start_date`,`end_date` and `view` parameters are optional, if they are not provided all declared operations for the past month are displayed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlightDeclarationPaginatedList'
        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'
      tags:
        - flight-declarations

  /flight_declaration_ops/{flight_declaration_id}/network_flight_declarations:
    get:
      parameters:
        - in: path
          name: flight_declaration_id
          description: 'This is the ID of the flight declaration'
          schema:
            type: string
            format: uuid
          required: true

      summary: 'Get a list of all flight declarations / operational intents from the USS Network'
      security:
        - AuthFromPassport: [flight_blender.read]
      description: "Get a list of all Operational Intents from the USSP network"

      responses:
        '200':
          description: The USSP network has been queried and the operational intents that encompass the bounds of the current flight declaration are provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkOpIntGeoJSONFeatureCollection'
        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'
      tags:
        - flight-declarations

  /flight_declaration_ops/{flight_declaration_id}/delete:
    delete:
      parameters:
        - in: path
          name: flight_declaration_id
          description: 'This is the ID of the flight declaration'
          schema:
            type: string
            format: uuid
          required: true

      summary: 'Delete the specified flight declaration from Flight Blender'
      security:
        - AuthFromPassport: [flight_blender.write]
      description: "Delete a flight declaration, used by verification framework to tear down tests."

      responses:
        '204':
          description: The Flight Declaration has been deleted
        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'
      tags:
        - flight-declarations

  /flight_stream/public_keys/:
    get:
      operationId: Get all Public Keys
      security:
        - AuthFromPassport: [flight_blender.read]

      description: 'List Authorized Public keys that can be used for submitting remote ID data using the associated private key.'
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SignedTelmetryPublicKey'
          description: ''
      tags:
      - message-signing-verification
    post:
      operationId: Create a new Public Key
      security:
        - AuthFromPassport: [ flight_blender.write]
      description: 'Create a new Authorized Public key. Once this key is submitted to Flight Blender, messages signed by the corresponding private key will be validated and processed.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignedTelmetryPublicKey'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SignedTelmetryPublicKey'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SignedTelmetryPublicKey'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignedTelmetryPublicKey'
          description: ''
      tags:
      - message-signing-verification
  /flight_stream/public_keys/{id}/:
    get:
      operationId: Get a single key
      security:
        - AuthFromPassport: [flight_blender.read]
      description: 'Get a single Authorized Public key by ID. A JWK json will be returned by Flight Blender.'
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this signed telmetry public key.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignedTelmetryPublicKey'
          description: ''
      tags:
      - message-signing-verification
    put:
      operationId: Update public key details
      description: 'Update the Public Key URL for a key'
      security:
        - AuthFromPassport: [ flight_blender.write]
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this signed telmetry public key.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignedTelmetryPublicKey'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SignedTelmetryPublicKey'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SignedTelmetryPublicKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignedTelmetryPublicKey'
          description: ''
      tags:
      - message-signing-verification
    delete:
      operationId: Remove Public Key
      description: 'Remove details of a public key in Flight Blender'
      security:
        - AuthFromPassport: [flight_blender.write]
      parameters:
      - name: id
        in: path
        required: true
        description: A UUID string identifying this signed telmetry public key.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - message-signing-verification
  /flight_declaration_ops/flight_declaration/{flight_declaration_id}:
    get:
      summary: 'Get the details of a single flight declaration'
      security:
        - AuthFromPassport: [flight_blender.read]
      description: "By default all flight declarations submitted in Flight Blender are not approved / authorized, for most most operations, authorization may \ not be necessary but in case operations needs authorization, this end point can be queried to display authorization"
      parameters:
        - in: path
          name: flight_declaration_id
          description: 'This is the ID of the flight declaration'
          schema:
            type: string
            format: uuid
          required: true

      responses:
        '200':
          description: Declaration successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlightDeclarationDetail'
        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'

      tags:
        - flight-declarations

  /flight_declaration_ops/flight_declaration_review/{flight_declaration_id}:
    put:
      summary: 'Submit a approval /rejection review for an operation'
      security:
        - AuthFromPassport: [flight_blender.write]
      description: "By default all flight declarations submitted in Flight Blender are not approved / authorized, for most most operations, authorization may \ not be necessary but in case operations needs authorization, this end point to change the status of operation and additionally update the state of the operations as it has commenced"
      parameters:
        - in: path
          name: flight_declaration_id
          description: 'This is the ID of the flight declaration'
          schema:
            type: string
            format: uuid
          required: true

      requestBody:
        description: Set whether a flight is approved or rejected
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/ApproveRejectDeclaration'


      responses:
        '200':
          description: Review successfully submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlightDeclarationDetail'
        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'

      tags:
        - flight-declarations

  /flight_declaration_ops/flight_declaration_state/{flight_declaration_id}:
    put:
      summary: 'Update the state of a existing Flight Declaration'
      security:
        - AuthFromPassport: [flight_blender.write]
      description: "By default all flight declarations submitted in Flight Blender are not set a 'Accepted' state, for most operations this would suffice, however the state may be changed / updated manually. "
      parameters:
        - in: path
          name: flight_declaration_id
          description: This is the ID of the flight declaration
          schema:
            type: string
            format: uuid
          required: true

      requestBody:
        description: Set the current state of the Flight Declaration
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/UpdateDeclarationState'

      responses:
        '200':
          description: Flight State successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlightDeclarationDetail'
        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'

      tags:
        - flight-declarations


  /flight_declaration_ops/set_flight_declaration:
    post:
      summary: 'Add a new Flight Declaration'
      description: "Submit a Flight Declaration into Flight Blender. \
        \ A flight declaration can be added upto 24 hours in advance and follows the ASTM Operational Intent data format. In most cases, you can use Flight Spotlight Launchpad functionality to submit a declaration."
      security:
        - AuthFromPassport: [flight_blender.write]

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutFlightDeclarationRequest'

      responses:
        '200':
          description: The flight declaration was successfully processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlightDeclarationCreationResponse'

        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'

      tags:
        - flight-declarations

  /geo_fence_ops/set_geo_fence:
    put:
      summary: 'Add a Geofence'
      security:
        - AuthFromPassport: [flight_blender.write]
      description:
        "Submit a Geofence in the form of a  GeoJSON declaration which is in turn submitted to  \
        \ Flight Spotlight. Geofence can be used to specify areas of interest, restricted areas, constraints etc."

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeoFenceGeoJSON'

      responses:
        '200':
          description: Geofence successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeoFenceCreated'
        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'

      tags:
        - geo-fence

  /geo_fence_ops/set_geozone:
    put:
      summary: 'Add a Geozone'
      security:
        - AuthFromPassport: [flight_blender.write]
      description:
        "Submit a Geofence in the form of a GeoZone which is in turn submitted to  \
        \ Flight Spotlight. Geofence can be used to specify areas of interest, restricted areas, constraints etc., Flight Blender will convert the fence into a format that is compatible with the EuroCAE ED-269 standard."

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeoZoneSubmission'

      responses:
        '200':
          description: Geofence successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeoFenceCreated'
        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'

      tags:
        - geozone-qualifier

  /geo_fence_ops/geo_fence:
    get:
      summary: 'Get a list of all submitted Geofence'
      security:
        - AuthFromPassport: [flight_blender.read]
      description: 'By default all geo fence submitted in Flight Blender has  a start and end date, if none is provided, the server will default to today as start and end date'

      parameters:
        - name: view
          description:
            'The area of this view: lat1,lng1,lat2,lng2.  Size may not exceed a diagonal length specified in the standard. The view is the smallest box
            bounded by the provided corner points.'
          schema:
            type: string
            example: 29.97816,31.13296,29.98025,31.13535
          in: query
        - name: start_date
          in: query
          schema:
            type: string
            format: date
          description: >
            The start date for the report. Must be used together with `end_date`.
        - name: end_date
          in: query
          schema:
            type: string
            format: date
          description: >
            The end date for the report. Must be used together with `start_date`.
        - name: page
          in: query
          schema:
            type: number
          description: >
            Page to fetch.
        - name: page_size
          in: query
          schema:
            type: number
          description: >
            Amount of results per page.
      responses:
        '200':
          description: Get a list of submitted geo fence, `start_date`+`end_date` are optional, by default geo fences for today displayed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeoFenceGeoJSONPaginatedList'
        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'
      tags:
        - geo-fence

  /geo_fence_ops/geo_fence/{geo_fence_id}:
    get:
      summary: 'Get details of a single geo fence'
      security:
        - AuthFromPassport: [flight_blender.read]
      description: 'Show details of a geofence as stored in the database'
      parameters:
        - in: path
          name: geo_fence_id
          description: 'This is the ID of the geo fence'
          schema:
            type: string
            format: uuid
          required: true

      responses:
        '200':
          description: 'Details of all Geofence stored in the database'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeoFenceDetails'
        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'

      tags:
        - geo-fence


  /geo_fence_ops/geo_fence/{geo_fence_id}/delete:
    delete:
      parameters:
        - in: path
          name: geo_fence_id
          description: 'This is the ID of the geo fence'
          schema:
            type: string
            format: uuid
          required: true

      summary: 'Delete the specified geo fence from Flight Blender'
      security:
        - AuthFromPassport: [flight_blender.write]
      description: "Delete a geo fence, used by verification framework to tear down tests."

      responses:
        '204':
          description: The Geo Fence has been deleted
        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'
      tags:
        - geo-fence

  /geo_fence_ops/geo_awareness/status:
    get:
      operationId: GetStatus
      security:
        - AuthFromAuthorizationAuthority:
            - geo-awareness.test
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeoAwarenessStatusResponse'
          description: >-
            The USS automated testing interface is activated and its status was retrieved successfully.
        '401':
          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        '403':
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
        '404':
          description: The USS automated testing interface is not activated.
      summary: Status of the USS automated testing interface
      description: Get the status of the USS automated testing interface.
      tags:
        - geozone-qualifier


  /geo_fence_ops/geo_awareness/geozone_sources/{geozone_source_id}:
    parameters:
      - name: geozone_source_id
        in: path
        required: true
        description: A UUID string identifying a Geozone data source.
        schema:
          $ref: '#/components/schemas/UUIDv4Format'

    put:
      security:
        - AuthFromAuthorizationAuthority:
            - geo-awareness.test
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGeozoneSourceRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeozoneSourceResponse'
          description: >-
            Request has been correctly handled and the USS has been instructed to import and activate the Geozone data from the source.
        '401':
          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        '403':
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
      operationId: PutGeozoneSource
      summary: Import and activate a Geozone source
      description: Instructs the USS to import and activate the Geozone data from this source.
      tags:
        - geozone-qualifier


    get:
      security:
        - AuthFromAuthorizationAuthority:
            - geo-awareness.test
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeozoneSourceResponse'
          description: >-
            The Geozone source exists in the USS and its status was retrieved successfully.
        '401':
          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        '403':
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
        '404':
          description: The Geozone source has been successfully deactivated or didn't exist.
      operationId: GetGeozoneSourceStatus
      summary: Status of a Geozone source
      description: Get the status of the Geozone source and its data.
      tags:
        - geozone-qualifier


    delete:
      security:
        - AuthFromAuthorizationAuthority:
            - geo-awareness.test
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeozoneSourceResponse'
          description: >-
            Request has been correctly handled and the Geozones dataset will be deleted by the USS.
            Status of the dataset shall be checked using the GET method until it returns a 404.
        '401':
          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        '403':
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
      operationId: DeleteGeozoneSource
      summary: Deactivate a Geozone source
      description: Instructs the USS to deactivate the Geozone source and its data.

      tags:
        - geozone-qualifier

  /geo_fence_ops/geo_awareness/geozones/check:
    post:
      security:
        - AuthFromAuthorizationAuthority:
            - geo-awareness.test
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeozonesCheckRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeozonesCheckReply'
          description: >-
            The check was successfully performed.
        '401':
          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        '403':
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
      operationId: CheckGeozones
      summary: Check for applicable Geozones
      description: Check if one or multiple Geozones are applicable at the position of interest for the specified period of time and operational conditions.

      tags:
        - geozone-qualifier

  /utm_adapter/crewed_traffic_information:
    get:
      parameters:
        - name: view
          in: query
          description: 'The area of this view: lat1,lng1,lat2,lng2.  Size may not exceed a diagonal length specified in the standard.  The view is the smallest box bounded by the provided corner points.'
          schema:
            type: string
            example: 29.97816,31.13296,29.98025,31.13535

          required: true

      summary: 'Get latest air-traffic data'
      security:
        - AuthFromPassport:  [flight_blender.read]
      description:
        "Using this endpoint, you can query a stream of air-traffic observations for the view port provided"

      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrafficInformationDiscoveryResponse'

        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'
      tags:
        - crewed-traffic


  /status:
    get:
      security:
        - Authority:
            - interuss.flight_planning.direct_automated_test
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
          description: >-
            The USS automated testing interface is available and its status was retrieved successfully.
        '401':
          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        '403':
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
        '404':
          description: The USS automated testing interface is not available.
      summary: Status of the USS automated testing interface
      description: Get the status of the USS automated testing interface.
      operationId: GetStatus
      tags:
        - flight-planning-qualifier

  /clear_area_requests:
    post:
      security:
        - Authority:
            - interuss.flight_planning.direct_automated_test

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClearAreaRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClearAreaResponse'
          description: Requested area was cleared successfully
        '401':
          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        '403':
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.

      summary: Clear area
      operationId: ClearArea
      description: >-
        This endpoint requests that the USS cancel and remove all flight plans in the specified area.
      tags:
        - flight-planning-qualifier

  /flight_plans/{flight_plan_id}:
    parameters:
      - name: flight_plan_id
        in: path
        required: true
        description: A UUID-formatted string identifying the user's flight plan intent.
        schema:
          $ref: '#/components/schemas/FlightPlanID'

    put:
      security:
        - Authority:
            - interuss.flight_planning.plan

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertFlightPlanRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertFlightPlanResponse'
          description: Requested data was processed successfully
        '401':
          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        '403':
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
        '409':
          description: The request contains a duplicate request_id and the response for that request is not available, or another conflict condition occurred.

      summary: Upsert flight plan
      operationId: UpsertFlightPlan
      description: >-
        This endpoint simulates a user intention to submit a new or updated flight plan.
      tags:
        - flight-planning-qualifier

    delete:
      security:
        - Authority:
            - interuss.flight_planning.direct_automated_test

      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteFlightPlanResponse'
          description: Flight plan was deleted successfully
        '401':
          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        '403':
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
        '404':
          description: The specified flight plan could not be found (it may have already been deleted).

      summary: Close flight plan
      operationId: DeleteFlightPlan
      description: >-
        This endpoint allows the test director to instruct the USS to remove a flight plan that is no longer needed for testing.
      tags:
        - flight-planning-qualifier




components:
  securitySchemes:
    AuthFromPassport:
      type: oauth2
      description: |-
        Flight Blender utilizes JWT tokens issued by a OAUTH server. This can be configured as an environment variable. In this case we recommend using / deploying a Authorization Server: Flight Passport. For more information see https://github.com/openutm/flight-passport

      flows:
        clientCredentials:
          tokenUrl: 'http://passport.openutm.net/oauth/token'
          scopes:
            flight_blender.write: 'Write data into Flight Blender'
            flight_blender.read: 'Read data into Flight Blender'

    AuthFromAuthorizationAuthority:
      flows:
        clientCredentials:
          tokenUrl: https://example.com/oauth/token
          scopes:
            dss.read.identification_service_areas: Client may query, read, or create
              subscriptions for Identification Service Areas for remote ID.  A remote
              ID display provider shall be granted this scope upon request.
            dss.write.identification_service_areas: Client may create, edit, and delete
              Identification Service Areas for remote ID.  A remote ID service provider
              shall be granted this scope upon request.
      type: oauth2
      description: |-
        Authorization from, or on behalf of, an authorization authority.  This authority shall issue access tokens that are JSON Web Tokens as defined in RFC 7519, using the `RS256` algorithm for the signature, and publish to all providers the public key for verifying that signature.

        The following fields shall be included in the JWT claim for access tokens issued by this authority:
        * `iss`, with the URL at which the token generation request was received.
        * `exp`, with a time no further than 1 hour in the future.
        * `sub`, with unique ID of the client requesting the access token.
        * `scope`, with an array of strings indicating the scopes granted.

        Multiple scopes for a single token shall be granted if requested.  The tokens granted by this authority shall protect against reuse of received tokens to impersonate the sender to other recipients (via use of the `aud` claim or other means).

        Clients shall provide these access tokens in an `Authorization` header in the form `Bearer <token>` in accordance with RFC 6750.
  schemas:
    ##### Begin Flight Planning Schema

    FlightPlanID:
      description: >-
        String identifying a user flight plan.  Format matches a version-4 UUID according to RFC 4122.
      maxLength: 36
      minLength: 36
      type: string
      format: uuid
      pattern: >-
        ^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-4[0-9a-fA-F]{3}\\-[8-b][0-9a-fA-F]{3}\\-[0-9a-fA-F]{12}$
      example: 03e5572a-f733-49af-bc14-8a18bd53ee39

    StatusResponse:
      type: object
      required:
        - status
      properties:
        status:
          description: >-
            The status of the USS automated testing interface.

            - `Starting`: the USS is starting and the automated test driver should wait before sending requests.

            - `Ready`: the USS is ready to receive test requests.
          type: string
          enum: [Starting, Ready]
          example: Ready
        api_name:
          description: |-
            Indication of the API implemented at this URL.  Must be "Flight Planning Automated Testing Interface".
          type: string
          example: Flight Planning Automated Testing Interface
        api_version:
          description: |-
            Indication of the API version implemented at this URL.  Must be "v0.4.0" when implementing this version of the API.
          type: string
          example: v0.4.0

    FlightPlan:
      description: >-
        Details of user's intent to create or modify a flight plan.
      required:
        - basic_information
      type: object
      properties:
        basic_information:
          $ref: '#/components/schemas/BasicFlightPlanInformation'
        astm_f3548_21:
          $ref: '#/components/schemas/ASTMF354821OpIntentInformation'
        uspace_flight_authorisation:
          $ref: '#/components/schemas/FlightAuthorisationData'
        rpas_operating_rules_2_6:
          $ref: '#/components/schemas/RPAS26FlightDetails'
        additional_information:
          description: >-
            Any information relevant to a particular jurisdiction or use case not described in the standard schema. The
            keys and values must be agreed upon between the test designers and USSs under test.
          type: object

    RPAS26FlightDetails:
      description: >-
        Information about a flight necessary to plan successfully using the RPAS Platform Operating Rules version 2.6.
      type: object
      properties:
        operator_type:
          description: The type of operator.
          type: string
          enum:
            - Recreational
            - CommercialExcluded
            - ReOC
        uas_serial_numbers:
          description: The list of UAS/drone serial numbers that will be operated during the operation.
          type: array
          items:
            type: string
        uas_registration_numbers:
          description: The list of UAS/drone registration numbers that will be operated during the operation.
          type: array
          items:
            type: string
        aircraft_type:
          description: Type of vehicle being used as per ASTM F3411-22a.
          type: string
          enum:
            - NotDeclared
            - Aeroplane
            - Helicopter
            - Gyroplane
            - HybridLift
            - Ornithopter
            - Glider
            - Kite
            - FreeBalloon
            - CaptiveBalloon
            - Airship
            - FreeFallOrParachute
            - Rocket
            - TetheredPoweredAircraft
            - GroundObstacle
            - Other
        flight_profile:
          description: Type of flight profile.
          type: string
          enum:
            - AutomatedGrid
            - AutomatedWaypoint
            - Manual
        pilot_license_number:
          description: License number for the pilot.
          type: string
        pilot_phone_number:
          description: Contact phone number for the pilot.
          type: string
        operator_number:
          description: Operator number.
          type: string
    FlightAuthorisationData:
      description: |-
        The details of a UAS flight authorization request, as received from the user.

        Note that a full description of a flight authorisation must include mandatory information required by ANNEX IV of COMMISSION IMPLEMENTING REGULATION (EU) 2021/664 for an UAS flight authorisation request. Reference: https://eur-lex.europa.eu/legal-content/EN/TXT/HTML/?uri=CELEX:32021R0664&from=EN#d1e32-178-1
      type: object
      properties:
        uas_serial_number:
          type: string
          description: Unique serial number of the unmanned aircraft or, if the unmanned aircraft is privately built, the unique serial number of the add-on. This is expressed in the ANSI/CTA-2063 Physical Serial Number format. Required by ANNEX IV of COMMISSION IMPLEMENTING REGULATION (EU) 2021/664, paragraph 1.
          example: MFR1C123456789ABC
        operation_mode:
          $ref: '#/components/schemas/OperationMode'
        operation_category:
          type: string
          enum:
            - Unknown
            - Open
            - Specific
            - Certified
          description: |-
            Category of UAS operation (‘open’, ‘specific’, ‘certified’) as defined in COMMISSION DELEGATED REGULATION (EU) 2019/945. Required by ANNEX IV of COMMISSION IMPLEMENTING REGULATION (EU) 2021/664, paragraph 4.
          example: Open
        uas_class:
          $ref: '#/components/schemas/UASClass'
        identification_technologies:
          type: array
          items:
            type: string
          description: Technology used to identify the UAS. Required by ANNEX IV of COMMISSION IMPLEMENTING REGULATION (EU) 2021/664, paragraph 6.
          example: ['ADS-B', 'ASTMNetRID']
        uas_type_certificate:
          description: |-
            Provisional field. Not applicable as of September 2021. Required only if `uas_class` is set to `other` by ANNEX IV of COMMISSION IMPLEMENTING REGULATION (EU) 2021/664, paragraph 4.
          type: string
          example: ''
        connectivity_methods:
          type: array
          items:
            type: string
          description: Connectivity methods. Required by ANNEX IV of COMMISSION IMPLEMENTING REGULATION (EU) 2021/664, paragraph 7.
          example: ['cellular']
        endurance_minutes:
          description: Endurance of the UAS. This is expressed in minutes. Required by ANNEX IV of COMMISSION IMPLEMENTING REGULATION (EU) 2021/664, paragraph 8.
          type: number
          format: int32
          example: 20
        emergency_procedure_url:
          type: string
          format: url
          description: The URL at which the applicable emergency procedure in case of a loss of command and control link may be retrieved. Required by ANNEX IV of COMMISSION IMPLEMENTING REGULATION (EU) 2021/664, paragraph 9.
          example: https://utm_uss.com/emergency_procedure
        operator_id:
          type: string
          description: |-
            Registration number of the UAS operator.
            The format is defined in EASA Easy Access Rules for Unmanned Aircraft Systems GM1 to AMC1
            Article 14(6) Registration of UAS operators and ‘certified’ UAS.
            Required by ANNEX IV of COMMISSION IMPLEMENTING REGULATION (EU) 2021/664, paragraph 10.
          example: FIN87astrdge12k8
        uas_id:
          description: |-
            When applicable, the registration number of the unmanned aircraft.
            This is expressed using the nationality and registration mark of the unmanned aircraft in
            line with ICAO Annex 7.
            Specified by ANNEX IV of COMMISSION IMPLEMENTING REGULATION (EU) 2021/664, paragraph 10.
          type: string
          example: HB-XXXX
      required:
        - uas_serial_number
        - operation_mode
        - uas_class
        - identification_technologies
        - operator_id
        - operation_category
        - connectivity_methods
        - endurance_minutes
        - emergency_procedure_url

    OperationMode:
      type: string
      enum:
        - Undeclared
        - Vlos
        - Bvlos
      description: Specify if the operation is a `VLOS` or `BVLOS` operation. Required by ANNEX IV of COMMISSION IMPLEMENTING REGULATION (EU) 2021/664, paragraph 2.
      example: Vlos

    UASClass:
      type: string
      enum:
        - Other
        - C0
        - C1
        - C2
        - C3
        - C4
        - C5
        - C6
      description: Specify the class of the UAS to be flown, the specifition matches EASA class identification label categories. UAS aircraft class as defined in COMMISSION DELEGATED REGULATION (EU) 2019/945 (C0 to C4) and COMMISSION DELEGATED REGULATION (EU) 2020/1058 (C5 and C6). This field is required by ANNEX IV of COMMISSION IMPLEMENTING REGULATION (EU) 2021/664, paragraph 4.
      example: C0
    ASTMF354821OpIntentInformation:
      description: >-
        Information provided about a flight plan that is necessary for ASTM F3548-21.
      type: object
      properties:
        priority:
          $ref: '#/components/schemas/Priority'
    Priority:
      description: >-
        Ordinal priority of the operational intent, as defined in ASTM F3548-21.
      type: integer
      default: 0
    BasicFlightPlanInformation:
      description: >-
        Basic information about a flight plan that a user and/or UAS can be expected to provide in most flight planning
        scenarios.
      type: object
      required:
        - usage_state
        - uas_state
      properties:
        usage_state:
          description: >-
            User's current usage of the flight plan.

            `Planned`: The user intends to fly according to this flight plan, but is not currently using the defined
              area with an active UAS.

            `InUse`: The user is currently using the defined area with an active UAS.

            `Closed`: The user is no longer using, or planning to use, the flight plan.
          type: string
          enum:
            - Planned
            - InUse
            - Closed
        uas_state:
          description: >-
            State of the user's UAS associated with this flight plan.

              - `Nominal`: The user or UAS reports or implies that it is performing nominally, or has not indicated
                `OffNominal` or `Contingent`.

              - `OffNominal`: The user or UAS reports or implies that it is temporarily not performing nominally, but
                may expect to be able to recover to normal operation.

              - `Contingent`: The user or UAS reports or implies that it is not performing nominally and may be unable
                to recover to normal operation.

              - `NotSpecified`: The UAS status is not currently available or known (for instance, if the flight is
                planned in the future and the UAS that will be flying has not yet connected to the system).
          type: string
          enum:
            - Nominal
            - OffNominal
            - Contingent
            - NotSpecified
        area:
          description: >-
            The complete area in which the user intends to fly, or may fly, as known by the user.  The user intends to
            fly, or may fly, anywhere in this entire area.

            This means, for instance, that an ASTM F3548-21 operational intent supporting this flight must have volumes
            that are a superset of this area.  If the operational intent did not cover this entire area, then all of the
            intended flight would not be covered by the operational intent (for at least part of the flight, the
            operator intends to fly outside the operational intent).
          type: array
          items:
            $ref: '#/components/schemas/Volume4D'
          default: []

    SurveillanceStatus:
      type: string
      description: Operational status of the surveillance service.
      enum:
        - OPERATIONAL
        - DEGRADED
        - OUTAGE

    HealthMessage:
      type: object
      description: Health information for the surveillance monitoring service.
      required:
        - sdsp_identifier
        - current_status
        - machine_readable_file_of_estimated_coverage
        - scheduled_degrations
        - timestamp
      properties:
        sdsp_identifier:
          type: string
          description: Identifier of the Surveillance Data Service Provider (SDSP).
          example: SDSP123
        current_status:
          $ref: '#/components/schemas/SurveillanceStatus'
        machine_readable_file_of_estimated_coverage:
          type: string
          format: uri
          description: URL to a machine-readable file describing estimated coverage.
          example: 'http://example.com/coverage'
        scheduled_degrations:
          type: string
          description: Scheduled degradations or maintenance windows.
          example: 'None'
        timestamp:
          type: string
          format: date-time
          description: ISO 8601 timestamp of the health status.
          example: '2024-10-01T12:00:00Z'

    ExecutionStyle:
      type: string
      description: >-
        The style of execution of a specified flight planning action that the operator would like the USS to perform.

          - `Hypothetical`: The user does not want the USS to actually perform any action regarding the actual flight plan.  Instead, the user would like to know the likely outcome if the action were hypothetically attempted.  The response to this request will not refer to an actual flight plan, or an actual state change in an existing flight plan, but rather a hypothetical flight plan or a hypothetical change to an existing flight plan.

          - `IfAllowed`: The user would like to perform the requested action if it is allowed.  If the requested action is allowed, the USS should actually perform the action (e.g., actually create a new ASTM F3548-21 operational intent).  If the requested action is not allowed, the USS should indicate that the action is Rejected and not perform the action.  The response to this request will refer to an actual flight plan when appropriate, and never refer to a hypothetical flight plan or status.

          - `InReality`: The user is communicating an actual state of reality.  The USS should consider the user to be actually performing (or attempting to perform) this action, regardless of whether or not the action is allowed under relevant UTM rules.
      enum: [Hypothetical, IfAllowed, InReality]
      example: IfAllowed

    UpsertFlightPlanRequest:
      description: >-
        Client request to emulate a user performing a flight planning action.
      type: object
      required:
        - flight_plan
        - execution_style
        - request_id
      properties:
        flight_plan:
          description: Complete new or updated information about the flight describing the flight planning action to be taken.
          anyOf:
            - $ref: '#/components/schemas/FlightPlan'
        execution_style:
          description: Style of execution for the requested flight planning action.
          anyOf:
            - $ref: '#/components/schemas/ExecutionStyle'
        request_id:
          type: string
          description: >-
            ID uniquely identifying the upsertion request.  If additional requests are received with the same
            request_id, the response from the first request should be returned, or an error indicated.

    PlanningActivityResult:
      type: string
      description: >-
        The result of a flight planning activity.

          - `Completed`: The user's flight plan has been updated according to the situation specified by the user.

          - `Rejected`: The updates the user requested to their flight plan are not allowed according to the rules under which the flight plan is being managed.  The reasons for rejection may include a disallowed conflict with another flight during preflight.

          - `Failed`: The USS was not able to successfully authorize or update the flight plan due to a problem with the USS or a downstream system.

          - `NotSupported`: The USS's implementation does not support the attempted interaction.  For instance, if the request specified a high-priority flight and the USS does not support management of high-priority flights.
      enum: [Completed, Rejected, Failed, NotSupported]
      example: Completed

    FlightPlanStatus:
      type: string
      description: >-
        The status of the user's flight plan.

          - `NotPlanned`: The USS has not created an authorized flight plan for the user.

          - `Planned`: The USS has created an authorized flight plan for the user, but the user may not yet start flying (even if within the time bounds of the flight plan).

          - `OkToFly`: The flight plan is in a state such that it is ok for the user to nominally fly within the bounds (including time) of the flight plan.

          - `OffNominal`: The flight plan now reflects the user's actions, but the flight plan is not in a nominal state (e.g., the USS has placed the ASTM F3548-21 operational intent into one of the Nonconforming or Contingent states).

          - `Closed`: The flight plan was closed successfully by the USS and is now out of the UTM system.
      enum: [NotPlanned, Planned, OkToFly, OffNominal, Closed]
      example: Planned

    AdvisoryInclusion:
      type: string
      description: >-
        Indication of whether any advisories or conditions were provided to the user along with the result of an
        associated flight planning attempt.

          - `Unknown`: It is unknown or irrelevant whether advisories or conditions were provided to the user

          - `AtLeastOneAdvisoryOrCondition`: At least one advisory or condition was provided to the user.

          - `NoAdvisoriesOrConditions`: No advisories or conditions were provided to the user.
      enum: [Unknown, AtLeastOneAdvisoryOrCondition, NoAdvisoriesOrConditions]
      default: Unknown
      example: NoAdvisoriesOrConditions

    UpsertFlightPlanResponse:
      type: object
      required:
        - planning_result
        - flight_plan_status
      properties:
        planning_result:
          description: >-
            The result of the flight plan creation or update attempt.
            If any option other than `Completed` is specified, the `notes` field should be populated with the reason for the unsuccessful outcome.
          anyOf:
            - $ref: '#/components/schemas/PlanningActivityResult'
        notes:
          description: >-
            Human-readable explanation of the observed result.  This explanation
            may be made available to a human reviewing the test results, and
            ideally should explain why an undesirable result was obtained.  For
            instance, if the injection attempt Failed, then these notes may
            indicate that the attempt failed because the DSS indicated 400 to a
            valid request (perhaps also including the valid request as proof).
          type: string
          example: Requested flight intersected operational intent c036326c-c97b-4926-bf9f-c60dc83d2b57
        flight_plan_status:
          description: >-
            The status of the user's flight plan following the flight planning activity.
          anyOf:
            - $ref: '#/components/schemas/FlightPlanStatus'
        includes_advisories:
          description: >-
            Nature of advisories included in the response to the user regarding their attempt to perform this flight
            planning activity.
          anyOf:
            - $ref: '#/components/schemas/AdvisoryInclusion'

    DeleteFlightPlanResponse:
      type: object
      required:
        - planning_result
        - flight_plan_status
      properties:
        planning_result:
          description: >-
            The result of attempted flight plan cancellation/closure.
            If any option other than `Completed` is specified, the `notes` field should be populated with the reason for the unsuccessful outcome.
          anyOf:
            - $ref: '#/components/schemas/PlanningActivityResult'
        notes:
          description: >-
            Human-readable explanation of the observed result.
          type: string
          example: DSS was unreachable when attempting to delete operational intent reference
        flight_plan_status:
          description: >-
            The status of the user's flight plan following the flight planning activity.
          anyOf:
            - $ref: '#/components/schemas/FlightPlanStatus'
        includes_advisories:
          description: >-
            Nature of advisories included in the response to the user regarding their attempt to cancel/close their
            flight plan.
          anyOf:
            - $ref: '#/components/schemas/AdvisoryInclusion'

    ClearAreaRequest:
      type: object
      required:
        - request_id
        - extent
      properties:
        request_id:
          description: >-
            Unique string identifying this request.  If a second request with an
            identical ID is received, the USS may return the same response from
            the previous operation rather than attempting to clear the area
            again (the USS may also attempt to clear the area again).
          type: string
        extent:
          description: >-
            The USS should cancel and remove any flight plan it manages where
            any part of that flight plan intersects this area.
          anyOf:
            - $ref: '#/components/schemas/Volume4D'
    ClearAreaOutcome:
      type: object
      properties:
        success:
          description: >-
            True if, and only if, all flight plans in the specified area managed by the
            USS were canceled and removed.
          type: boolean
          default: false
        message:
          description: >-
            If the USS was unable to clear the entire area, this message can
            provide information on the problem encountered.
          type: string
          example: >-
            DSS at dss.example.com returned 500 when attempting to delete
            operational intent 57e98b17-aefa-4eee-a376-5140e4a8385f
        details:
          description: Optional free-form structured data to augment `message`.
          type: object
    ClearAreaResponse:
      type: object
      required:
        - outcome
      properties:
        outcome:
          $ref: '#/components/schemas/ClearAreaOutcome'

    ##### End Flight Planning Schema
    RIDCapability:
      type: string
      description: >-
        Capability of a USS.

          `ASTMRID2019`: USS supports Remote ID as defined in ASTM Remote ID standard that was released in 2019.

          `ASTMRID2022`: USS supports Remote ID as defined in ASTM Remote ID standard that was released in 2022.

      enum:
      - ASTMRID2019
      - ASTMRID2022
    RIDCapabilitiesResponse:
      type: object
      properties:
        capabilities:
          type: array
          description: Set of capabilities supported by this USS.
          items:
            $ref: '#/components/schemas/RIDCapability'
          default: []

    ApproveRejectDeclaration:
      description: A flight declaration approved / created
      type: object
      properties:
          is_approved:
            type: boolean
            example: 1
          approved_by:
            type: string
            format: email

    UpdateDeclarationState:
      description: A list of flight declaration states that can be manually updated
      type: object
      properties:
          submitted_by:
            type: string
            format: email
          state:
            $ref: '#/components/schemas/FlightDeclarationStateOperatorUpdateEnum'


    RemoteIDDataProcessed:
      description: Remote ID data processed successfully
      type: object
      properties:
        message:
          type: string
          example: 'RemoteID data successfully submitted'

    FlightDeclarationCreationResponse:
      description: A response when the UTM system processes a Flight Declaration
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        message:
          type: string
          example: 'Submitted Flight Declaration'
        is_approved:
          type: boolean
          example: 1
        state:
          $ref: '#/components/schemas/FlightDeclarationStateEnum'



    SubscriptionCreated:
      description: A subscription in the DSS for the area has been created
      type: object
      properties:
        message:
          type: string
          example: DSS Subscription created
        id:
          type: string
          format: uuid
          readOnly: true
        dss_subscription_response:
          type: object
          properties:
            created:
              type: integer
              format: uuid
              readOnly: true
            dss_subscription_id:
              type: string
              format: uuid
              readOnly: true
            notification_index:
              type: integer
              format: uuid
              readOnly: true

    GeoFenceCreated:
      description: A Geofence has been created
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        message:
          type: string
          example: 'Geofence successfully created'

    OpenskiesNetworkDataRequestSuccessful:
      properties:
        message:
          type: string
          example: Openskies Network stream started

    OpenskiesNetworkDataRequestError:
      properties:
        message:
          type: string
          example: An incorrect view port bbox was provided

    Standard500ErrorResponse:
      description: An unexpected error occurred.
      $ref: '#/components/schemas/Error'

    JWKSResponse:
      description: A JWKS public key set is returned
      $ref: '#/components/schemas/JWKS'



    PongResponse:
      description: The server is running properly
      $ref: '#/components/schemas/Pong'

    BadRequest400ErrorResponse:
      description: The JSON is not valid

      $ref: '#/components/schemas/Error'

    Unauthorized401ErrorResponse:
      description: The request requires an user authentication

      $ref: '#/components/schemas/Error'

    Forbidden403ErrorResponse:
      description: the access is not allowed

      $ref: '#/components/schemas/Error'

    FlightFeedJSON:
      type: object
      properties:
        observations:
            $ref: '#/components/schemas/ArrayOfObservations'

    TrafficInformationDiscoveryResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Successfully retrieved traffic information url'
        url:
          type: string
          example: 'https://www.example.com/traffic_information/get_traffic_information'
          description: >-
            The URL to the traffic information endpoint
        description:
          type: string
          example: 'Start a QUIC connection to the URL to receive traffic information in real-time'

    FlightDeclarationPaginatedList:
      type: object
      properties:
        links:
          type: object
          properties:
            next:
              type: string
              format: uri
              description: URL of the next page to query
            previous:
              type: string
              format: uri
              description: URL of the previous page to query
        total:
          type: integer
        page:
          type: integer
          example: 1
        pages:
          type: integer
          example: 2
        page_size:
          type: integer
          example: 10
        results:
          $ref: '#/components/schemas/FlightDeclarationList'



    FlightDeclarationList:
      type: array
      items:
        $ref: '#/components/schemas/FlightDeclarationDetail'

    SignedTelmetryPublicKey:
      type: object
      properties:
        key_id:
          type: string
          description: Specify the Key ID
        url:
          type: string
          format: uri
          description: Enter the JWK / JWKS URL of the public key
          maxLength: 200
          pattern: "^(?:[a-z0-9.+-]*)://(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?(?:(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)(?:\\\
            .(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)){3}|\\[[0-9a-f:.]+\\\
            ]|([a-z\xA1-\uFFFF0-9](?:[a-z\xA1-\uFFFF0-9-]{0,61}[a-z\xA1-\uFFFF0-9])?(?:\\\
            .(?!-)[a-z\xA1-\uFFFF0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z\xA1-\uFFFF-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\\
            .?|localhost))(?::[0-9]{1,5})?(?:[/?#][^\\s]*)?\\z"
        is_active:
          type: boolean
          description: Specify if the key is active, only active keys will be validated
            against in the signed telemetry feeds
      required:
      - key_id
      - url

    FlightDeclarationDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
        approved_by:
          description: Email address of person approving this declaration
          type: string
          format: email
        originating_party:
          description: Provide the name of the flight declaration e.g. Flight Blender 102
          type: string
        bounds:
          description: The bounding box of the flight declraratoin in minX, minY, maxX, maxY order
          type: string
          example: 34.378675201285006,-89.45781948677741,34.403695823615934,-89.4279213143275

        submitted_by:
          description: Email address of person submitting this declaration
          type: string
          format: email
        aircraft_id:
          description: Id of the aircraft
          type: string
        is_approved:
          description: Is the operation approved for flight?
          type: string
          format: boolean
          example: 1
        start_datetime:
          description: The start for the query
          type: string
          format: date-time
        end_datetime:
          description: The enddate for the query
          type: string
          format: date-time
        latest_telemetry_datetime:
          description: The the date time of the latest telemetry observation was sent
          type: string
          format: date-time
        flight_declaration_geojson:
          description: The operational intent for this flight declaration as a GeoJSON FeatureCollection
          type: object
          properties:
            type:
              type: string
              example: "FeatureCollection"
            features:
              type: array
              items:
                $ref: '#/components/schemas/FlightDeclarationFeatureGeoJSON'
        flight_declaration_raw_geojson:
          description: The raw / original Flight Plan as GeoJSON
          type: object
          properties:
            type:
              type: string
              example: "FeatureCollection"
            features:
              type: array
              items:
                $ref: '#/components/schemas/FlightDeclarationFeatureGeoJSON'
        operational_intent:
          description: The operational intent for this flight declaration, a raw flight plan is converted to an operational intent which can be in turn submitted to a DSS
          $ref: '#/components/schemas/OperationalIntentDetails'
        state:
          $ref: '#/components/schemas/FlightDeclarationStateEnum'
        type_of_operation:
          enum:
          - 1
          - 2
          - 3

          type: integer
          description: >
            Set the type of operation
             * `1` - VLOS
             * `2` - BVLOS
             * `3` - CREWED

    PutFlightDeclarationRequest:
      type: object
      properties:
        type_of_operation:
          enum:
          - 1
          - 2
          - 3
          type: integer
          description: >
            Set the activity type and the airspace
             * `1` - VLOS
             * `2` - BVLOS
             * `3` - CREWED
        submitted_by:
          description: Email address of person submitting this declaration
          type: string
          format: email
        aircraft_id:
          description: Specify the ID of the aircraft
          type: string
        originating_party:
          description: Set the name of the flight declaration
          type: string
          example: Flight 1023
        start_datetime:
          description: The start date and time for the flight
          type: string
          format: date-time
        end_datetime:
          description: The end date and time for the flight
          type: string
          format: date-time
        flight_declaration_geo_json:
          $ref: '#/components/schemas/FlightDeclarationGeoJSONFeatureCollection'

    FlightDeclarationGeoJSONFeatureCollection:
      type: object
      properties:
        type:
          type: string
          example: "FeatureCollection"
        features:
          type: array
          items:
            $ref: '#/components/schemas/FlightDeclarationFeatureGeoJSON'
    FlightDeclarationStateEnum:
          type: integer

          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 8
          description: >
            The state of the operation
             * `0` - Processing
             * `1` - Accepted
             * `2` - Activated
             * `3` - Nonconforming
             * `4` - Contingent
             * `5` - Ended
             * `6` - Withdrawn
             * `7` - Cancelled
             * `8` - Rejected

    FlightDeclarationStateOperatorUpdateEnum:
          type: integer
          enum:
          - 2
          - 3
          - 5
          description: >
            The state of the operation
             * `2` - Activated
             * `3` - Nonconforming
             * `5` - Ended

    FlightDeclarationFeatureGeoJSON:
      type: object
      required:
        - type
        - geometry
        - properties
      properties:
        type:
          type: string
          enum:
            - Feature
        geometry:
          $ref: '#/components/schemas/FlightDeclarationGeometryGeoJSON'

        properties:
          type: object
          properties:
            start_time:
              type: string
              format: date-time
            end_time:
              type: string
              format: date-time
            max_altitude:
              type: object
              properties:
                metres:
                  type: number
                datum:
                  type: string
                  enum:
                    - 'WGS84'
            min_altitude:
              type: object
              properties:
                metres:
                  type: number
                datum:
                  type: string
                  enum:
                    - 'WGS84'
          nullable: true
        id:
          oneOf:
            - type: string
              format: uuid
            - type: integer

    Latitude:
      format: double
      description:
        Degrees of latitude north of the equator, with reference to the
        WGS84 ellipsoid.
      maximum: 90
      exclusiveMaximum: false
      minimum: -90
      exclusiveMinimum: false
      type: number
      example: 34.12
    Longitude:
      format: double
      description:
        Degrees of longitude east of the Prime Meridian, with reference
        to the WGS84 ellipsoid.
      maximum: 180
      exclusiveMaximum: false
      minimum: -180
      exclusiveMinimum: false
      type: number
      example: -118.456

    LatLngPoint:
      description: Point on the earth's surface.
      required:
        - lat
        - lng
      type: object
      properties:
        lng:
          $ref: '#/components/schemas/Longitude'
        lat:
          $ref: '#/components/schemas/Latitude'

    GeoPolygon:
      description: |-
        An enclosed area on the earth.
        The bounding edges of this polygon shall be the shortest paths between connected vertices.  This means, for instance, that the edge between two points both defined at a particular latitude is not generally contained at that latitude.
        The winding order shall be interpreted as the order which produces the smaller area.
        The path between two vertices shall be the shortest possible path between those vertices.
        Edges may not cross.
        Vertices may not be duplicated.  In particular, the final polygon vertex shall not be identical to the first vertex.
      required:
        - vertices
      type: object
      properties:
        vertices:
          minItems: 3
          type: array
          items:
            $ref: '#/components/schemas/LatLngPoint'

    Volume3D: # Reference https://github.com/uastech/standards/blob/master/remoteid/canonical.yaml
      description:
        A three-dimensional geographic volume consisting of a vertically-extruded
        polygon.
      required:
        - outline_polygon
      type: object
      properties:
        outline_polygon:
          anyOf:
            - $ref: '#/components/schemas/GeoPolygon'
          description: Projection of this volume onto the earth's surface.
        altitude_lower:
          anyOf:
            - $ref: '#/components/schemas/Altitude'
          description: Minimum bounding altitude of this volume.
        altitude_upper:
          anyOf:
            - $ref: '#/components/schemas/Altitude'
          description: Maximum bounding altitude of this volume.

    Altitude:
      type: object
      description: An altitude, in meters, above the WGS84 ellipsoid.
      properties:
        value:
          type: integer
        reference:
          type: string
        units:
          type: string

    Volume4D: # Reference https://github.com/uastech/standards/blob/master/remoteid/canonical.yaml
      description: Contiguous block of geographic spacetime.
      required:
        - volume
      type: object
      properties:
        volume:
          anyOf:
            - $ref: '#/components/schemas/Volume3D'
          description: Constant spatial extent of this volume.
        time_start:
          description:
            Beginning time of this volume.  RFC 3339 format, per OpenAPI
            specification.
          anyOf:
            - $ref: '#/components/schemas/Time'
        time_end:
          description: End time of this volume.  RFC 3339 format, per OpenAPI specification.
          anyOf:
            - $ref: '#/components/schemas/Time'

    GeoFenceGeoJSON:
      type: object
      required:
        - type
        - features
      properties:
        type:
          type: string
          enum:
            - FeatureCollection
        features:
          type: array
          items:
            $ref: '#/components/schemas/GeoFenceFeatures'

    GeoFenceDetails:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        raw_geo_fence:
          type: object
          $ref: '#/components/schemas/GeoFenceGeoJSON'
        geozone:
          description: >-
            If this constraint is an ED-269 compliant geo zone, the details
            about that geo zone.
          anyOf:
          - $ref: '#/components/schemas/GeoZone'
        upper_limit:
          type: number
          multipleOf: 0.01
        lower_limit:
          type: number
          multipleOf: 0.01
        name:
          type: string
        bounds:
          type: string
        altitude_ref:
          type: number
        start_datetime:
          type: string
          format: date-time
        end_datetime:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    GeoFenceGeoJSONList:
      type: array
      items:
        $ref: '#/components/schemas/GeoFenceDetails'

    GeoFenceGeoJSONPaginatedList:
      type: object
      properties:
        links:
          type: object
          properties:
            next:
              type: string
              format: uri
              description: URL of the next page to query
            previous:
              type: string
              format: uri
              description: URL of the previous page to query
        total:
          type: integer
        page:
          type: integer
          example: 1
        pages:
          type: integer
          example: 2
        page_size:
          type: integer
          example: 10
        results:
          $ref: '#/components/schemas/GeoFenceGeoJSONList'


    Point2D:
      type: array
      maxItems: 2
      minItems: 2
      items:
        type: number

    GeoFenceFeatures:
      type: object
      required:
        - type
        - geometry
        - properties
      properties:
        type:
          type: string
          enum:
            - Feature
        geometry:
          $ref: '#/components/schemas/GeoFenceGeometryGeoJSON'

        properties:
          type: object
          properties:
            upper_limit:
              type: number
              format: float
            lower_limit:
              type: number
              format: float
            name:
              type: string
              example: "Sample GeoFence"

          nullable: true
        id:
          oneOf:
            - type: string
            - type: integer

    FlightDeclarationGeometryGeoJSON:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - Polygon
            - MultiPolygon
            - LineString

        coordinates:
          type: array
          items:
            $ref: '#/components/schemas/Point2D'
    GeoFenceGeometryGeoJSON:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - Polygon
            - MultiPolygon

        coordinates:
          type: array
          items:
            $ref: '#/components/schemas/Point2D'

    NetworkOpIntGeoJSONFeatureCollection:
      description: The operational intent for this flight declaration as a GeoJSON FeatureCollection
      type: object
      properties:
        type:
          type: string
          example: "FeatureCollection"
        features:
          type: array
          items:
            $ref: '#/components/schemas/NetworkOpIntsGeoJSON'

    NetworkOpIntsGeoJSON:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - Polygon
            - MultiPolygon

        coordinates:
          type: array
          items:
            $ref: '#/components/schemas/Point2D'

    Error:
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
    Pong:
      properties:
        message:
          type: string
          example: Server running properly

    JWKS:
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/JWK'

    JWK:
        properties:
          alg:
            type: string
          use:
            type: string
          kid:
            type: string
          e:
            type: string
          kty:
            type: string
          n:
            type: string

    FlightRIDData:
      type: array
      items:
        type: object
        required:
          - current_states
          - flight_details

        properties:

          current_states:
            type: array
            items:
              $ref: '#/components/schemas/RIDAircraftState'
          flight_details:
            type: object
            $ref: '#/components/schemas/RIDOperatorDetails'

    FlightObservationProcessingResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Flight observation data successfully processed'
        status:
          type: integer
          example: 201

    ArrayOfObservations:
      type: array
      items:
        type: object
        required:
          - lon_dd
          - lat_dd
          - timestamp
          - altitude_mm
          - icao_address
          - traffic_source

        properties:
          session_id:
            format: string
            example:  "b1b9b1b9-1b9b-1b9b-1b9b-1b9b1b9b1b9b"
            description: Session ID associated with the observation
          lon_dd:
            type: number
            format: float
            example:  -7.079881271685565
            description: Longitude in Decimal Degrees
          altitude_mm:
            type: number
            format: float
            description: Meters represented in WGS1984 Datum
          lat_dd:
            type: number
            format: float
            example: 52.816644178938816
            description: Latitude in Decimal Degrees
          timestamp:
            type: integer
            format: int64
          icao_address:
            type: string
            maxLength: 24
          traffic_source:
            enum:
            - 0
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
            - 7
            - 8
            - 9
            - 10
            - 11
            type: integer
            description: >-
              The source of the observation:
              * `0` = 1090ES
              * `1` - UAT
              * `2` - Multi-radar (MRT)
              * `3` - MLAT
              * `4` - SSR
              * `5` - PSR
              * `6` - Mode-S
              * `7` - MRT
              * `8` - SSR + PSR Fused
              * `9` - ADS-B
              * `10` - FLARM
              * `11` - Network Remote-ID
          source_type:
            enum:
            - 0
            - 1
            type: integer
            description: >-
              The type of observation data that is provided:
              * `0` - True
              * `1` - Fused
          metadata:
            type: object
            description: An arbitrary JSON that can be submitted into Flight Blender

    GetDisplayDataResponse:
      description: Response to a request for current data that would be visualized by a Display Application.
      type: object
      properties:
        flights:
          description: Current information for set of discovered flights whose precise locations are known.
          type: array
          items:
            $ref: '#/components/schemas/Flight'

        clusters:
          description: >-
            Current information for sets of discovered flights whose precise locations are not
            known.
          type: array
          items:
            $ref: '#/components/schemas/Cluster'
          default: []
    GetDetailsResponse:
      description: Response to a request to get details about a flight.
      type: object
    Flight:
      description: ''
      required:
        - id
      type: object
      properties:
        id:
          description: >-
            Identifier of flight that may be used to obtain details about the flight.
            This is not necessarily the UTM/flight ID in the remote ID system.
          type: string
        most_recent_position:
          description: Most recent position known for the flight.
          allOf:
            - $ref: '#/components/schemas/Position'
        recent_paths:
          description: Paths the flight recently traveled, if available.
          type: array
          items:
            $ref: '#/components/schemas/Path'
    Cluster:
      description: 'A general area containing one or more flight.'
      type: object
      required:
        - corners
        - area_sqm
        - number_of_flights
      properties:
        corners:
          description: Two opposite corners of a rectangular lat-lng box bounding the cluster.
          type: array
          items:
            $ref: '#/components/schemas/Position'
          minItems: 2
          maxItems: 2
        area_sqm:
          description: Area of the cluster in square meters.
          type: number
          format: double
        number_of_flights:
          description: Number of flights within the cluster.
          type: number
          format: int32
          # minValue: 1
    Position:
      description: 'A position on Earth.'
      required:
        - lat
        - lng
      type: object
      properties:
        lat:
          format: double
          description: >-
            Degrees of latitude north of the equator, with reference to the WGS84 ellipsoid.
          type: number
        lng:
          format: double
          description: >-
            Degrees of longitude east of the Prime Meridian, with reference to the WGS84
            ellipsoid.
          type: number
        alt:
          format: double
          description: >-
            Geodetic altitude (NOT altitude above launch, altitude above ground, or EGM96):
            aircraft distance above the WGS84 ellipsoid as measured along a line that passes
            through the aircraft and is normal to the surface of the WGS84 ellipsoid.
          type: number
    Path:
      description: Path followed by a flight.
      required:
        - positions
      type: object
      properties:
        positions:
          description: Sequential positions available for a flight.
          type: array
          items:
            $ref: '#/components/schemas/Position'

    RIDFlightID:
      description: |-
        ID, unique to a remote ID service provider, which identifies a particular flight for which the remote ID service provider is providing remote ID services.

        The following characters are not allowed: \0 \t \r \n # % / : ? @ [ \ ]
      maxLength: 255
      minLength: 1
      type: string
      example: uss1.JA6kHYCcByQ-6AfU

    GetFlightDetailsResponse:
      description:
        Response to remote ID provider query for details about a specific
        flight.
      required:
        - details
      type: object
      properties:
        details:
          $ref: '#/components/schemas/RIDOperatorDetails'
    UAClassificationEU:
      type: object
      properties:
        category:
          type: string
          enum:
          - EUCategoryUndefined
          - Open
          - Specific
          - Certified
          default: EUCategoryUndefined
        class:
          type: string
          enum:
          - EUClassUndefined
          - Class0
          - Class1
          - Class2
          - Class3
          - Class4
          - Class5
          - Class6
          default: EUClassUndefined
    RIDOperationalStatus:
      description: |-
        Operational Status indicates whether the associated UA is on the ground, airborne, or in an
        emergency situation, or the Remote ID system has failed. The emergency status takes
        precedence over the other status modes. This status can be used for filtering purposes.
      enum:
      - Undeclared
      - Ground
      - Airborne
      - Emergency
      - RemoteIDSystemFailure
      type: string
      default: Undeclared
    SpecificSessionID:
      description: |-
        A unique 20 byte ID intended to identify a specific flight (session) while providing a
        greater level of privacy to the operator. The first byte is the registered unique Specific Session ID
        Type maintained by a registrar (see Annex A5), and the remaining 19 bytes is the Session ID per the
        Specific Session ID Type specification.
        Initial scheme registry entries include:
        0 – reserved
        1 – Internet Engineering Task Force (IETF) Drone Remote Identification Protocol (DRIP) entity ID
        2 – IEEE 1609.2 HashedID8
        Expressed as a hexadecimal string of the underlying data bytes.  A recipient should ignore any dashes in this value.  If fewer than 20 bytes are specified, the remaining bytes at the end are assumed to have value 0.
      type: string
      example: 02-a1b2c3d4e5f60708
      default: ''
    UASID:
      description: Identification of the UAS performing this flight.  At least one
        field of this object must be specified.
      type: object
      properties:
        serial_number:
          description: This is expressed in the CTA-2063-A Serial Number format.
          type: string
          example: INTCJ123-4567-890
          default: ''
        registration_id:
          description: If a CAA provides a method of registering UAS, this number
            is provided by the CAA or its authorized representative.  Format is
            <ICAO Nationality MarkA>.<CAA Assigned ID>, ASCII encoded, only
            uppercase letters (A-Z), dot (.), and digits (0-9) are allowed.
            Example is valid for the US.
          type: string
          example: N.123456
          default: ''
        utm_id:
          description: A UTM-provided universally unique ID traceable to a
            non-obfuscated ID that acts as a "session id" to protect exposure of
            operationally sensitive information.
          type: string
          example: ae1fa066-6d68-4018-8274-af867966978e
          default: ''
        specific_session_id:
          $ref: '#/components/schemas/SpecificSessionID'
    RIDOperatorDetails:
      description:
        Details about a flight reported by a remote ID service provider.  At
        least one of the registration or serial fields must be filled if required
        by CAA.
      required:
        - id
      type: object
      properties:
        id:
          description: ID for this flight, matching a existing flight declaration ID in Flight Blender in request. If the ID of does not match, Flight Blender will reject data from this endpoint.
          type: string
          example: 238c0189-cdb1-43f0-8510-5718b37eeca4

        eu_classification:
          description: When this field is specified, the Classification Type is "European
            Union".  If no other classification field is specified, the Classification Type
            is "Undeclared".
          anyOf:
          - $ref: '#/components/schemas/UAClassificationEU'
        uas_id:
          $ref: '#/components/schemas/UASID'
        operator_id:
          description: This optional field provides a CAA-issued registration/license ID for the
            remote pilot or operator. Format is <ICAO Nationality MarkA>.<CAA Assigned ID>, ASCII
            encoded, only uppercase letters (A-Z), dot (.), and digits (0-9) are allowed. Example
            is valid for the US.
          type: string
          default: ''
          example: N.OP123456
        operator_location:
          $ref: '#/components/schemas/OperatorLocation'
        operation_description:
          description:
            Free-text field that enables the operator to describe the purpose
            of a flight, if so desired.
          type: string
          example:
            SafeFlightDrone company doing survey with DJI Inspire 2. See my
            privacy policy www.example.com/privacy.
        auth_data:
          $ref: '#/components/schemas/RIDAuthData'
        serial_number:
          description:
            Can be specified when no registration ID exists and required
            by law in a region. This is expressed in the ANSI/CTA-2063-A Physical Serial
            Number format.
          type: string
          example: INTCJ123-4567-890
        registration_number:
          description:
            If a CAA provides a method of registering UAS, this number
            is provided by the CAA or its authorized representative.  Required when
            required by law in a region.
          type: string
          example: FA12345897
    URL:
      description: Valid http or https URL.
      type: string
    RIDFlightsURL:
      anyOf:
      - $ref: '#/components/schemas/URL'
      description: |-
        The URL at which the remote ID flights and their details may be retrieved.  See `/flights` and `/flights/{id}/details` paths for specification of this endpoint.
        This URL is the base flights resource.  If this URL is specified as https://example.com/flights then the flight details for a particular {id} may be obtained at the URL https://example.com/flights/{id}/details.  This URL may not have a trailing / character.
      type: string
      example: https://example.com/flights

    UUIDv4:
      description: UUID v4.
      maxLength: 36
      minLength: 36
      type: string
      example: 03e5572a-f733-49af-bc14-8a18bd53ee39
    Version:
      description: A version string used to reference an object at a particular point
        in time. Any updates to an object must contain the corresponding version to
        maintain idempotent updates.
      type: string
    EntityUUID:
      anyOf:
      - $ref: '#/components/schemas/UUIDv4'
      description: Universally-unique identifier for an Entity communicated through
        the DSS.  Formatted as UUIDv4.
    IdentificationServiceArea:
      description: An Identification Service Area (area in which remote ID services
        are being provided).  The DSS reports only these declarations and clients
        must exchange flight information peer-to-peer.
      required:
      - flights_url
      - owner
      - time_start
      - time_end
      - version
      - id
      type: object
      properties:
        flights_url:
          $ref: '#/components/schemas/RIDFlightsURL'
        owner:
          description: Assigned by the DSS based on creating client’s ID (via access
            token).  Used for restricting mutation and deletion operations to owner.
          type: string
          example: myuss
        time_start:
          format: date-time
          description: Beginning time of service.  RFC 3339 format, per OpenAPI specification.
          type: string
        time_end:
          format: date-time
          description: End time of service.  RFC 3339 format, per OpenAPI specification.
          type: string
        version:
          $ref: '#/components/schemas/Version'
        id:
          anyOf:
          - $ref: '#/components/schemas/EntityUUID'
          description: Unique identifier for this Identification Service Area.
    RIDAuthData:
      description: Additional authentication data.
      required:
        - format
        - data
      type: object
      properties:
        format:
          description: Format of additional authentication data.
          type: string
        data:
          description: Authentication data in form specified by `format`.
          type: string

    GeoZoneSubmission:
      type: object
      required:
        - title
        - description
        - zones
      properties:
        features:
          type: array
          description: A set of Geozones
          items:
            $ref: '#/components/schemas/GeoZone'

        title:
          type: string
          description: A text based title e.g. UASZoneVersion 2022-06-16
        description:
          type: string
          description: A long form description of the Geozone
    #
    # ED-269 compliant GeoZone representation
    #


    GeoZone:
      type: object
      description: >-
        An airspace of defined dimensions, above the land areas or territorial
        waters of a State, within which a particular restriction or condition
        for UAS flights applies.
      required:
      - identifier
      - country
      - type
      - restriction
      - zone_authority
      properties:
        identifier:
          anyOf:
          - $ref: '#/components/schemas/CodeZoneIdentifierType'
          description: >-
            A string of characters that uniquely identifies the UAS Zone within
            the State/Territory identified by the country attribute.

            Note - The UAS Zone is uniquely identified worldwide by the
            combination of the country and the identifier attributes
        country:
          anyOf:
          - $ref: '#/components/schemas/CodeCountryISOType'
          description: >-
            The State that has the authority to declare the zone.

            Note - There will be no Zone belonging to two States. Not necessary
            to code the information that two zones are "in neighboring States"
            or "related".
        zone_authority:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Authority'
        name:
          anyOf:
          - $ref: '#/components/schemas/TextShortType'
          description: >-
            A free text name by which the zone may be known by the public or by
            the UAS community.
        type:
          anyOf:
          - $ref: '#/components/schemas/CodeZoneType'
          description: >-
            An indication whether the Zone is provided with its common
            definition or with a customised definition, for a particular user.
        restriction:
          anyOf:
          - $ref: '#/components/schemas/CodeRestrictionType'
          description: >-
            An indication if flying in the zone is conditional, forbidden or
            unrestricted.
        restriction_conditions:
          type: array
          items:
            $ref: '#/components/schemas/ConditionExpressionType'
          description: >-
            An indication of the conditions under which the zone can be used
        region:
          type: integer
          format: int32
          minimum: 0
          maximum: 65535
          description: >-
            Where applicable, identifies a region inside a State where the UAS
            Zone is located.

            Note 1) identified with a digit between 0-65535 (16 bit),
            corresponding to a list of regions pre-defined for each State.

            Note 2) this attribute is intended to facilitate extracting sub-sets
            of data, for specific regions
        reason:
          items:
            $ref: '#/components/schemas/CodeZoneReasonType'
          description: >-
            A coded indication for the reason that led to the establishment of
            the zone.
          maxItems: 9
          type: array
        other_reason_info:
          type: string
          maxLength: 30
          description: >-
            A free text description of the reason that led to the establishment
            of the zone, when not covered by a pre-defined coded value.
        regulation_exemption:
          anyOf:
          - $ref: '#/components/schemas/CodeYesNoType'
          description: >-
            This is an extension point. It allows adding additional attributes
            of national interest through this element.
        u_space_class:
          anyOf:
          - $ref: '#/components/schemas/CodeUSpaceClassType'
          description: >-
            A code that identifies the category or class of the zone applying a
            "USpace concept".

            Note: Two (draft) classifications exist, one from Eurocontrol and
            one from CORUS. Therefore, two instances of this attribute are
            expected, one from each sub-list. This might be later replaced with
            separate attributes and separate lists of values.
        message:
          anyOf:
          - $ref: '#/components/schemas/TextShortType'
          description: >-
            A message to be displayed to the user of the zone, typically on the
            RPS for the Remote Pilot, to make him/her aware about specific
            information associated with the zone (typically when it is not only
            a restriction to fly in the zone, thus not only an alert or an
            automatic limitation, for example : “image capture prohibited in
            this zone”, “frequent strong winds in this zone”, “no landing or
            take-off in this zone”). This message is also used to indicate
            exemptions from regulation in a zone (see below). Several
            information can be grouped in a message, separated by a “/”.
        additional_properties:
          type: object
          default:
          description: >-
            Indicates that exemptions from the national or European regulations
            are allowed in the UAS Zone, that will be detailed via the "message"
            property.
    CodeZoneIdentifierType:
      type: string
      maxLength: 7
      description: >-
        a string of maximum 7 characters that uniquely identifies the area
        within a geographical scope.

        NOTE (1): This shall not include the country identifier, which is a
        separate attribute of the UAS Zone.

        NOTE (2): The length of this data type is limited to 7 characters for
        compatibility with ARINC 424 and AIXM, where an airspace designator may
        have maximum 10 characters. The 10 characters are the result of
        concatenating the UAS Zone attributes for country and identifier.
    CodeCountryISOType:
      type: string
      minLength: 3
      maxLength: 3
      description: >-
        A 3 letter identifier of a country or territory using the ISO 3166-1
        alpha-3 standard.

        NOTE: >-
           The ISO 3-letter country codes come with the following advantages:
              - allow to distinguish between remote territories and mainland
              - are unique, unlike the ICAO Country codes where the same State
                could have two or more codes
              - are also used in military standards, such as NATO STANAG 1059
                INT, which come with well document additions that might be also
                useful for UAS areas.
    CodeZoneType:
      type: string
      description: >-
        A coded list of values which allows indicating that the definition of a
        UAS Zone is specifically customised for a particular UAS or operator.
      enum:
      - COMMON
      - CUSTOMIZED
      - PROHIBITED
      - REQ_AUTHORISATION
      - CONDITIONAL
      - NO_RESTRICTION
    ConditionExpressionType:
      type: string
      maxLength: 10000
      description: >-
        A coded expression that provides information about what is authorised /
        forbidden in a zone that has conditional access.

        By difference with the “Message” field per zone, this coded expression
        is made to be interopreted by the UAS while the “Message” is to
        interpreted by the remote pilot.

        NOTE: the maximum field length is 10 000 characters.

        ---------------------- Condition definition language ---------------- •
        A list of relevant characteristics (CHARTYPE) has first to be
        established per state, and their finite list of acceptable values
        (CHARVAL)

        • Each chartype and charval fields are defined by a limited set of
        characters

        • A public document shall give the definitions of each, and provide the
        reference to legal or technical characteristics implied

        • The Geozone editor per state can use these characteristics, with the
        dedicated condition language defined below, to define exact conditions
        per zone

        • Each UAS Geofencing function shall be loaded with the corresponding
        chararacteristic status of the UAS for the intended flight, so as to be
        able to apply the conditions , either to generate alerts or to limit the
        flight

        • If the value of a given characteristic of the condition equation is
        not defined in the UAS, the UAS Geofencing function should inform the
        pilot in Geoawareness alerting or consider that the zone is forbidden,
        by default in automatic Geofencing.

        A conditional expression shall be of the following type:

        • The UAS is PERMITTED XOR PROHIBITED (exclusive choice) to fly in this
        zone at this time IF (Characteristic1) CHARTYPE1 = (Value1) CHARVAL1 AND

        CHARTYPE 2 = CHARVAL 2 AND ... AND End IF

        OR (...)

        ...

        End OR

        • Only the fields in bold need to be edited in the character string,
        separated by”/”. Others are implicit.

        Examples of CHARTYPE and CHARVALUE:

        • CHARTYPE: operator type; Acceptable CHARVAL values:
        Military/Police/Firefighting

        • CHARTYPE: Operator ID (registration number); Acceptable CHARVAL
        values: as per registration format

        • CHARTYPE: Operation type: A1 as per EASA Open Types or S1 (National
        standard Scenario 1), STS01 (EASA Specific standard scenario) or ...

        • CHARTYPE: UTM operation type: Planned/Unplanned,

        • CHARTYPE: passengers on board: yes /no Note that it is possible in
        each national catalog of chartype and charval items, to define complex
        categories of operation/drone /equipment. Example: In nation A, we may
        have a type “drone level” with values Low, Medium, High. Each level
        corresponds to a defined set of required UAS performance/operation
        features/ operator qualification etc. This avoids to code a complex
        combination in the geozone database. This conditional expression can
        also be used to code a prohibition of image capture in a zone.

        Example: PERMITTED/IMAGE CAPTURE=NO/NOISE

          CLASS=A/OR/OPERATOR=POLICE

        Meaning: >-
           the fight is permitted in this zone at that time if No image is
        captured (removed or deactivated) and if noise class = class A
        (following a known classification) or if the UAS operator is the Police
    CodeRestrictionType:
      type: string
      description: >-
        An indication if flying in the zone is conditional, forbidden or
        unrestricted.
    CodeZoneReasonType:
      type: string
      description: >-
        A coded indication of a reason that justifies the existence of an UAS
        Zone
      enum:
      - AIR_TRAFFIC
      - SENSITIVE
      - PRIVACY
      - POPULATION
      - NATURE
      - NOISE
      - FOREIGN_TERRITORY
      - EMERGENCY
      - OTHER
    CodeUSpaceClassType:
      type: string
      maxLength: 100
      description: >-
        A coded identifier for a category or class of the zone applying a
        "USpace concept".

        NOTE: >-
           In the current model version, there is no specific list of values.
        For example, the “X”, “Y”, “Z” types of zones as per SESAR JU Corus
        project on USpace concept of operation could be used in a future
        version. Until a precise list of values is defined, this data type will
        be considered as string of characters of maximum 100 characters.
    CodeYesNoType:
      type: string
      description: >-
        A coded value that indicates a choice between a positive (yes) or a
        negative (no) applicability.
      enum:
      - YES
      - NO
    Authority:
      type: object
      description: >-
        A relevant authority that is in charge for authorising, being notified
        or providing information for UAS operations in the UAS zone.

        Rule: >-
           at least one of the following shall be specified - siteURL, email,
        phone.
      properties:
        name:
          anyOf:
          - $ref: '#/components/schemas/TextShortType'
          description: The official name of a public or private authority
        service:
          anyOf:
          - $ref: '#/components/schemas/TextShortType'
          description: >-
            The name of a specific department or service within the organisation
        contact_name:
          anyOf:
          - $ref: '#/components/schemas/TextShortType'
          description: >-
            The name or role of a specific person that needs to be contacted
            within the organisation
        site_url:
          anyOf:
          - $ref: '#/components/schemas/TextShortType'
          description: >-
            The URL of the public internet site through which the organisation
            may be contacted

            Note: in the data coding format, this might be further constrained
            in order to ensure a valid URL format.
        email:
          anyOf:
          - $ref: '#/components/schemas/TextShortType'
          description: >-
            The e-mail address by which the organisation may be contacted.

            Note: in the data coding format, this might be further constrained
            in order to ensure a valid e-mail format.
        phone:
          anyOf:
          - $ref: '#/components/schemas/TextShortType'
          description: >-
            A phone number at which the organisation may be contacted
        purpose:
          anyOf:
          - $ref: '#/components/schemas/CodeAuthorityRole'
          description: The role of the Authority in relation with the zone.
        interval_before:
          type: string
          format: duration
          description: >-
            The minimal time interval required between notification or
            authorization request and starting to operate in the zone, in the
            format PnnDTnnHnnM (ISO 8601).
    CodeAuthorityRole:
      type: string
      description: >-
        A coded list of values indicating the role that an authority has in
        relation with the UAS zone.
      enum:
      - AUTHORIZATION
      - NOTIFICATION
      - INFORMATION
    TextShortType:
      type: string
      maxLength: 200
      description: A free text with a maximum length of 200 characters


    ################################################################################
    #################### Start of ASTM-standard definitions    #####################
    #################### interfaces/astm-utm/Protocol/utm.yaml #####################
    ################################################################################
    EntityOVN:
      title: EntityOVN
      description: >-
        A token associated with a particular UTM Entity+version created by the
        DSS upon creation or modification of an Entity reference and provided to
        the client creating or modifying the Entity reference.  The EntityOVN is
        stored privately by the DSS and then compared against entries in a Key
        provided to mutate the airspace.  The EntityOVN is also provided by the
        client whenever that client transmits the full information of the Entity
        (either via GET, or via a subscription notification).
      type: string
      minLength: 16
      maxLength: 128
      example: 9d158f59-80b7-4c11-9c0c-8a2b4d936b2d

    UUIDv4Format:
      description: >-
        String whose format matches a version-4 UUID according to RFC 4122.
      maxLength: 36
      minLength: 36
      type: string
      format: uuid
      pattern: >-
        ^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-4[0-9a-fA-F]{3}\\-[8-b][0-9a-fA-F]{3}\\-[0-9a-fA-F]{12}$
      example: 03e5572a-f733-49af-bc14-8a18bd53ee39
    EntityID:
      description: >-
        Identifier for an Entity communicated through the DSS.  Formatted as a
        UUIDv4.
      anyOf:
        - $ref: '#/components/schemas/UUIDv4Format'
      example: 2f8343be-6482-4d1b-a474-16847e01af1e
    Time:
      required:
        - value
        - format
      type: object
      properties:
        value:
          type: string
          description: >-
            RFC3339-formatted time/date string.  The time zone must be 'Z'.
          format: date-time
          example: '1985-04-12T23:20:50.52Z'
        format:
          type: string
          enum:
            - RFC3339

    OperationalIntentTestInjection:
      description: >-
        Parameters that define an operational intent: this injection is used to
        create a operational intent reference in the DSS and also responding to
        requests for details of that operational intent (by other USSes or the
        test driver). The USS under test will need to process this data to both
        create a valid operational intent reference and responding to a query for
        details.
      required:
        - state
        - priority
        - volumes
        - off_nominal_volumes
      type: object
      properties:
        state:
          $ref: '#/components/schemas/OperationalIntentState'
        priority:
          $ref: '#/components/schemas/Priority'
        volumes:
          description: >-
            Nominal volumes, as would be reported by a USS's operational_intents endpoint.
          type: array
          items:
            $ref: '#/components/schemas/Volume4D'
        off_nominal_volumes:
          description: >-
            Off-Nominal volumes, as would be reported by a USS's operational_intents endpoint.
          type: array
          items:
            $ref: '#/components/schemas/Volume4D'

    Radius:
      required:
        - value
        - units
      type: object
      properties:
        value:
          format: float
          description: >-
            Distance from the centerpoint of a circular area, along the WGS84
            ellipsoid.
          type: number
          minimum: 0
          exclusiveMinimum: true
          example: 300.183
        units:
          type: string
          description: >-
            FIXM-compatible units.  Only meters ("M") are acceptable for UTM.
          enum:
            - M
    Polygon:
      description: >-
        An enclosed area on the earth. The bounding edges of this polygon are
        defined to be the shortest paths between connected vertices.  This
        means, for instance, that the edge between two points both defined at a
        particular latitude is not generally contained at that latitude. The
        winding order must be interpreted as the order which produces the
        smaller area. The path between two vertices is defined to be the
        shortest possible path between those vertices. Edges may not cross.
        Vertices may not be duplicated.  In particular, the final polygon vertex
        must not be identical to the first vertex.
      required:
        - vertices
      type: object
      properties:
        vertices:
          minItems: 3
          type: array
          items:
            $ref: '#/components/schemas/LatLngPoint'
    Circle:
      description: A circular area on the surface of the earth.
      type: object
      properties:
        center:
          $ref: '#/components/schemas/LatLngPoint'
        radius:
          $ref: '#/components/schemas/Radius'
    OperationalIntentState:
      description: >-
        State of an operational intent.
        'Accepted': Operational intent is created and shared, but not yet in
        use; see standard text for more details.
        The create or update request for this operational intent reference must
        include a Key containing all OVNs for all relevant Entities.
        'Activated': Operational intent is in active use; see standard text for
        more details.
        The create or update request for this operational intent reference must
        include a Key containing all OVNs for all relevant Entities.
        'Nonconforming': UA is temporarily outside its volumes, but the
        situation is expected to be recoverable; see standard text for more
        details.
        In this state, the `/uss/v1/operational_intents/{entityid}/telemetry`
        USS-USS endpoint should respond, if available, to queries from USS
        peers.  The create or update request for this operational intent may
        omit a Key in this case because the operational intent is being adjusted
        as flown and cannot necessarily deconflict.
        'Contingent': UA is considered unrecoverably unable to conform with its
        coordinate operational intent; see standard text for more details.
        This state must transition to Ended.  In this state, the
        `/uss/v1/operational_intents/{entityid}/telemetry` USS-USS endpoint
        should respond, if available, to queries from USS peers.  The create or
        update request for this operational intent may omit a Key in this case
        because the operational intent is being adjusted as flown and cannot
        necessarily deconflict.
      type: string
      enum:
        - Accepted
        - Activated
        - Nonconforming
        - Contingent

    OperationalIntentDetails:
      description: >-
        Details of a UTM operational intent. Note that this data is not stored
        in the DSS; only with the clients.
      type: object
      properties:
        volumes:
          description: >-
            Volumes that wholly contain the operational intent while being as
            small as practical.

            Start and end times, as well as lower and upper altitudes, are
            required for each volume. The end time may not be in the past.

            Required with at least one item when the operational intent is
            Accepted, Activated, or Nonconforming.

            May not contain any items when the operational intent is Contingent.
          type: array
          items:
            $ref: '#/components/schemas/Volume4D'
          default: []
        off_nominal_volumes:
          description: >-
            Volumes that contain the anticipated area of non-conformance while
            the aircraft is in the Nonconforming or Contingent states.

            Start and end times, as well as lower and upper altitudes, are
            required for each volume. The end time may not be in the past.

            Required with at least one item when the operational intent is
            Nonconforming or Contingent.

            May not contain any items when the operational intent is Accepted or
            Activated.
          type: array
          items:
            $ref: '#/components/schemas/Volume4D'
          default: []
        priority:
          $ref: '#/components/schemas/Priority'

    UssAvailabilityState:
      type: string
      enum:
        - Unknown
        - Normal
        - Down
      description: >-
        A USS is presumed to be in the Unknown state absent indication otherwise
        by a USS with availability arbitration scope.  Upon determination via
        availability arbitration, a USS is Down when it does not respond
        appropriately, and a Down USS may not perform the following operations
        in the DSS:

        * Create an operational intent in the Accepted or Activated states

        * Modify an operational intent whose new or unchanged state is Accepted
        or Activated

        * Delete an operational intent

        A USS in the Unknown state possesses all the capabilities, within the
        DSS, of a USS in the Normal state.

    OperationalIntentReference:
      description: >-
        The high-level information of a planned or active operational intent
        with the URL of a USS to query for details.  Note: 'ovn' is returned
        ONLY to the USS that created the operational intent but NEVER to other
        USS instances.
      required:
        - id
        - manager
        - uss_availability
        - version
        - state
        - time_start
        - time_end
        - uss_base_url
        - subscription_id
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityID'
        manager:
          type: string
          example: uss1
          description: >-
            Created by the DSS based on creating client's ID (via access
            token).  Used internal to the DSS for restricting mutation and
            deletion operations to manager.  Used by USSs to reject operational
            intent update notifications originating from a USS that does not
            manage the operational intent.
        uss_availability:
          $ref: '#/components/schemas/UssAvailabilityState'
        version:
          type: integer
          format: int32
          example: 1
          description: >-
            Numeric version of this operational intent which increments upon
            each change in the operational intent, regardless of whether any
            field of the operational intent reference changes.  A USS with the
            details of this operational intent when it was at a particular
            version does not need to retrieve the details again until the
            version changes.
        state:
          $ref: '#/components/schemas/OperationalIntentState'
        ovn:
          description: >-
            Opaque version number of this operational intent.  Populated only
            when the OperationalIntentReference is managed by the USS retrieving
            or providing it.  Not populated when the OperationalIntentReference
            is not managed by the USS retrieving or providing it (instead, the
            USS must obtain the OVN from the details retrieved from the managing
            USS).
          anyOf:
            - $ref: '#/components/schemas/EntityOVN'
        time_start:
          description: Beginning time of operational intent.
          anyOf:
            - $ref: '#/components/schemas/Time'
        time_end:
          description: End time of operational intent.
          anyOf:
            - $ref: '#/components/schemas/Time'
        uss_base_url:
          $ref: '#/components/schemas/OperationalIntentUssBaseURL'
        subscription_id:
          description: >-
            The ID of the subscription that is ensuring the operational intent
            manager receives relevant airspace updates.
          anyOf:
            - $ref: '#/components/schemas/SubscriptionID'
    SubscriptionID:
      description: >-
        Identifier for a subscription communicated through the DSS.  Formatted
        as a UUIDv4.
      anyOf:
        - $ref: '#/components/schemas/UUIDv4Format'
      example: 78ea3fe8-71c2-4f5c-9b44-9c02f5563c6f
    OperationalIntentUssBaseURL:
      description: >-
        The base URL of a USS implementation that implements the parts of the
        USS-USS API necessary for providing the details of this operational
        intent, and telemetry during non-conformance or contingency, if
        applicable.
      anyOf:
        - $ref: '#/components/schemas/UssBaseURL'
    UssBaseURL:
      description: >-
        The base URL of a USS implementation of part or all of the USS-USS API.
        Per the USS-USS API, the full URL of a particular resource can be
        constructed by appending, e.g., `/uss/v1/{resource}/{id}` to this base
        URL. Accordingly, this URL may not have a trailing '/' character.
      type: string
      example: https://uss.example.com/utm
    OperationalIntent:
      description: Full description of a UTM operational intent.
      required:
        - reference
        - details
      type: object
      properties:
        reference:
          $ref: '#/components/schemas/OperationalIntentReference'
        details:
          $ref: '#/components/schemas/OperationalIntentDetails'
    GetOperationalIntentDetailsResponse:
      description: >-
        Response to peer request for the details of operational intent with the
        given ID.
      required:
        - operational_intent
      type: object
      properties:
        operational_intent:
          $ref: '#/components/schemas/OperationalIntent'
    ErrorResponse:
      description: >-
        Human-readable string returned when an error occurs as a result of a USS
        - DSS transaction.
      type: object
      properties:
        message:
          description: >-
            Human-readable message indicating what error occurred and/or why.
          type: string
          example: The error occurred because [...]
    GetFlightsResponse:
      description: Response to remote ID provider query for flight information in
        an area of interest.
      required:
      - timestamp
      - flights
      type: object
      properties:
        timestamp:
          format: date-time
          description: The remote ID service provider's timestamp for when this information
            was current.  RFC 3339 format, per OpenAPI specification.
          type: string
        flights:
          description: A list of all flights that have been within the requested area
            within the remote ID retention period.  This includes flights that are
            not currently within the requested area, but were within the requested
            area within the remote ID retention period.
          type: array
          items:
            $ref: '#/components/schemas/RIDFlight'
    RIDFlight:
      description: Description of a remote ID flight.
      required:
      - id
      - aircraft_type
      type: object
      properties:
        id:
          $ref: '#/components/schemas/RIDFlightID'
        aircraft_type:
          anyOf:
          - $ref: '#/components/schemas/RIDAircraftType'
          description: Generic type of aircraft.
        current_state:
          anyOf:
          - $ref: '#/components/schemas/RIDAircraftState'
          description: |-
            The most up-to-date state of the aircraft.  Required when the aircraft is currently in the requested area unless `volumes` is specified.

            If current data is not being received from the UAS by the Service Provider, the lack of change in this field is sufficient to indicate that current data is not being received.
        volumes:
          description: The set of spacetime volumes the aircraft is within.  Required
            if `current_state` is not specified.  The fields `time_start` and `time_end`
            are required if `current_state` is not specified.
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/Volume4D'
        simulated:
          description: If specified as true, this flight is not a physical aircraft;
            it is just a simulation to test the system.
          type: boolean
        recent_positions:
          description: |-
            A short collection of recent aircraft movement, specified only when `include_recent_positions` is true.  If `volumes` is not specified and `include_recent_positions` is true, then this field is required.

            Recent positions provided in this field must conform to requirements in the standard which generally prohibit including positions outside the requested area except transitionally when the aircraft enters or exits the requested area, and which prohibit including positions that not sufficiently recent.

            Note that a UI should not draw a connective line between two consecutive position reports that both lie outside the requested area.
          type: array
          items:
            $ref: '#/components/schemas/RIDRecentAircraftPosition'
    OperatorLocation:
      description: Location associated with the Remote Pilot
      type: object
      required:
      - position
      properties:
        position:
          anyOf:
          - $ref: '#/components/schemas/LatLngPoint'
          description: Position of the Remote Pilot.
        altitude:
          anyOf:
          - $ref: '#/components/schemas/Altitude'
          description: Provides the Operator Altitude based on WGS-84 height above ellipsoid (HAE)
            (See Geodetic Altitude).  This value is provided in meters and must have a minimum
            resolution of 1 m.
        altitude_type:
          description: Source of data for the altitude field.
          type: string
          enum:
          - Takeoff
          - Dynamic
          - Fixed

    RIDAircraftState:
      description: State of an aircraft for the purposes of remote ID.
      required:
      - timestamp
      - timestamp_accuracy
      - accuracy_h
      - accuracy_v
      - speed
      - vertical_speed
      - track
      - speed_accuracy
      - position
      type: object
      properties:
        timestamp:
          $ref: '#/components/schemas/Time'
        timestamp_accuracy:
          format: float
          description: 'Declaration of timestamp accuracy, which is the largest difference
            between Timestamp and true time of applicability for any of the following
            fields: Latitude, Longitude, Geodetic Altitude, Pressure Altitude of Position,
            Height. to determine time of applicability of the location data provided.  Expressed
            in seconds, precise to 1/10ths of seconds. The accuracy reflects the 95%
            uncertainty bound value for the timestamp.'
          minimum: 0
          exclusiveMinimum: false
          type: number
        operational_status:
          $ref: '#/components/schemas/RIDOperationalStatus'
        position:
          $ref: '#/components/schemas/RIDAircraftPosition'
        track:
          format: float
          description: Direction of flight expressed as a "True North-based" ground
            track angle.  This value is provided in degrees East of North with a minimum
            resolution of 1 degree.
          maximum: 360
          exclusiveMaximum: true
          minimum: 0
          exclusiveMinimum: false
          type: number
        speed:
          format: float
          description: Ground speed of flight in meters per second.
          minimum: 0
          exclusiveMinimum: false
          type: number
          example: 1.9
        speed_accuracy:
          anyOf:
          - $ref: '#/components/schemas/SpeedAccuracy'
          description: Accuracy of horizontal ground speed.
        vertical_speed:
          format: float
          description: Speed up (vertically) WGS84-HAE, m/s.
          type: number
          example: 0.2
        height:
          $ref: '#/components/schemas/RIDHeight'
        group_radius:
          format: float
          description: Farthest horizontal distance from reported group location at
            which an aircraft in the group may be located (meters).  This value contains
            the "Operating Area Radius" data from the common data dictionary when
            group operation area is specified by point-radius.
          minimum: 0
          exclusiveMinimum: true
          type: number
        group_ceiling:
          format: float
          description: Maximum altitude (meters WGS84-HAE) of Group Operation.  This
            value contains the "Operating Area Ceiling" data from the common data
            dictionary when group operation area is specified by point-radius.
          type: number
        group_floor:
          format: float
          description: Minimum altitude (meters WGS84-HAE) of Group Operation.  If
            not specified, ground level shall be assumed.  This value contains the
            "Operating Area Floor" data from the common data dictionary when group
            operation area is specified by point-radius.
          type: number
        group_count:
          format: int32
          description: When operating a group (or formation or swarm), number of aircraft
            in group.  This value contains the "Operating Area Count" data from the
            common data dictionary when group operation area is specified by point-radius.
          minimum: 1
          exclusiveMinimum: false
          type: integer
        group_time_start:
          format: date-time
          description: Time at which a group operation starts.  This value contains
            the "Operation Area Start" data from the common data dictionary when group
            operation area is specified by point-radius.
          type: string
        group_time_end:
          format: date-time
          description: Time at which a group operation starts.  This value contains
            the "Operation Area End" data from the common data dictionary when group
            operation area is specified by point-radius.
          type: string
    RIDHeight:
      description: A relative altitude for the purposes of remote ID.
      required:
      - distance
      - reference
      type: object
      properties:
        distance:
          format: float
          description: Distance above reference datum.  This value is provided in
            meters and must have a minimum resolution of 1 meter.
          type: number
        reference:
          description: The reference datum above which the height is reported.
          enum:
          - TakeoffLocation
          - GroundLevel
          type: string
    SpeedAccuracy:
      description: |-
        This is the same enumeration scale and values from ADS-B NACv.

        `SAUnknown`: Unknown speed accuracy

        `SA10mpsPlus`: > 10 m/s

        `SA10mps`: < 10 m/s

        `SA3mps`: < 3 m/s

        `SA1mps`: < 1 m/s

        `SA03mps`: < 0.3 m/s
      enum:
      - SAUnknown
      - SA10mpsPlus
      - SA10mps
      - SA3mps
      - SA1mps
      - SA03mps
      type: string
    RIDAircraftType:
      description: |-
        Type of aircraft for the purposes of remote ID.

        `VTOL` is a fixed wing aircraft that can take off vertically.  `Rotocraft` includes multirotor.
      enum:
      - NotDeclared
      - Aeroplane
      - Rotorcraft
      - Gyroplane
      - VTOL
      - Ornithopter
      - Glider
      - Kite
      - FreeBalloon
      - CaptiveBalloon
      - Airship
      - FreeFallOrParachute
      - Rocket
      - TetheredPoweredAircraft
      - GroundObstacle
      - Other
      type: string
    RIDRecentAircraftPosition:
      description: ""
      required:
      - time
      - position
      type: object
      properties:
        time:
          format: date-time
          description: Time at which this position applied.  RFC 3339 format, per
            OpenAPI specification.
          type: string
        position:
          $ref: '#/components/schemas/RIDAircraftPosition'
    RIDAircraftPosition:
      description: Position of an aircraft as reported for remote ID purposes.
      required:
      - lat
      - lng
      - alt
      type: object
      properties:
        lat:
          $ref: '#/components/schemas/Latitude'
        lng:
          $ref: '#/components/schemas/Longitude'
        alt:
          format: float
          description: 'Geodetic altitude (NOT altitude above launch, altitude above
            ground, or EGM96): aircraft distance above the WGS84 ellipsoid as measured
            along a line that passes through the aircraft and is normal to the surface
            of the WGS84 ellipsoid.  This value is provided in meters and must have
            a minimum resolution of 1 meter.'
          type: number
          example: 1321.2
        accuracy_h:
          anyOf:
          - $ref: '#/components/schemas/HorizontalAccuracy'
          description: Horizontal error that is likely to be present in this reported
            position.  Required when `extrapolated` field is true and always in the
            entry for the current state.
        accuracy_v:
          anyOf:
          - $ref: '#/components/schemas/VerticalAccuracy'
          description: Vertical error that is likely to be present in this reported
            position.  Required when `extrapolated` field is true and always in the
            entry for the current state.
        extrapolated:
          description: True if this position was generated primarily by computation
            rather than primarily from a direct instrument measurement.  Assumed false
            if not specified.
          type: boolean
        pressure_altitude:
          format: float
          description: The uncorrected altitude (based on reference standard 29.92
            inHg, 1013.25 mb) provides a reference for algorithms that utilize "altitude
            deltas" between aircraft.  This value is provided in meters and must have
            a minimum resolution of 1 meter.
          type: number
    HorizontalAccuracy:
      description: |-
        This is the NACp enumeration from ADS-B, plus 1m for a more complete range for UAs.

        `HAUnknown`: Unknown horizontal accuracy

        `HA10NMPlus`: > 10NM (18.52km)

        `HA10NM`: < 10NM (18.52km)

        `HA4NM`: < 4NM (7.408km)

        `HA2NM`: < 2NM (3.704km)

        `HA1NM`: < 1NM (1852m)

        `HA05NM`: < 0.5NM (926m)

        `HA03NM`: < 0.3NM (555.6m)

        `HA01NM`: < 0.1NM (185.2m)

        `HA005NM`: < 0.05NM (92.6m)

        `HA30m`: < 30m

        `HA10m`: < 10m

        `HA3m`: < 3m

        `HA1m`: < 1m
      enum:
      - HAUnknown
      - HA10NMPlus
      - HA10NM
      - HA4NM
      - HA2NM
      - HA1NM
      - HA05NM
      - HA03NM
      - HA01NM
      - HA005NM
      - HA30m
      - HA10m
      - HA3m
      - HA1m
      type: string
    VerticalAccuracy:
      description: |-
        This is the GVA enumeration from ADS-B, plus some finer values for UAs.

        `VAUnknown`: Unknown vertical accuracy

        `VA150mPlus`: > 150m

        `VA150m`: < 150m

        `VA45m`: < 45m

        `VA25m`: < 25m

        `VA10m`: < 10m

        `VA3m`: < 3m

        `VA1m`: < 1m
      enum:
      - VAUnknown
      - VA150mPlus
      - VA150m
      - VA45m
      - VA25m
      - VA10m
      - VA3m
      - VA1m
      type: string
    PutIdentificationServiceAreaNotificationParameters:
      description: Parameters of a message informing of new full information for an
        Identification Service Area.  Pushed (by a client, not the DSS) directly to
        clients with subscriptions when another client makes a change to airspace
        within a cell with a subscription.
      required:
      - subscriptions
      type: object
      properties:
        service_area:
          anyOf:
          - $ref: '#/components/schemas/IdentificationServiceArea'
          description: |-
            Identification Service Area that the notifying client changed or created.

            If this field is populated, the Identification Service Area was created or updated.  If this field is not populated, the Identification Service Area was deleted.
        subscriptions:
          description: Subscription(s) prompting this notification.
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionState'
        extents:
          $ref: '#/components/schemas/Volume4D'
          description: |-
            The new or updated extents of the Identification Service Area.

            Omitted if Identification Service Area was deleted.
    SubscriptionNotificationIndex:
      format: int32
      description: Tracks the notifications sent for a subscription so the subscriber
        can detect missed notifications more easily.
      type: integer
    SubscriptionState:
      description: State of AreaSubscription which is causing a notification to be
        sent.
      required:
      - subscription
      type: object
      properties:
        subscription_id:
          $ref: '#/components/schemas/SubscriptionUUID'
        notification_index:
          $ref: '#/components/schemas/SubscriptionNotificationIndex'
    SubscriptionUUID:
      anyOf:
      - $ref: '#/components/schemas/UUIDv4'
      description: Universally-unique identifier for a Subscription communicated through
        the DSS.  Formatted as UUIDv4.
    ################################################################################
    ####################### End of ASTM-standard definitions #######################
    ################################################################################

    CreateTestParameters:
      description: 'A complete set of data to be injected into a Service Provider system under test.'
      required:
        - requested_flights
      type: object
      properties:
        requested_flights:
          description: >-
            One or more logical flights, each containing test data to inject into the system.
            Elements should be sorted in ascending order of `timestamp`.
          type: array
          items:
            $ref: '#/components/schemas/TestFlight'
    ChangeTestResponse:
      description: ''
      required:
        - injected_flights
        - version
      type: object
      properties:
        injected_flights:
          description: 'The complete set of test data actually injected into the Service Provider system under test.'
          type: array
          items:
            $ref: '#/components/schemas/TestFlight'
        version:
          description: Version of test.  Used to delete test.
          type: string
          example: 1
    DeleteTestResponse:
      description: ''
      required:
        - injected_flights
      type: object
      properties:
        injected_flights:
          description: 'The complete set of test data deleted.'
          type: array
          items:
            $ref: '#/components/schemas/TestFlight'
    TestFlight:
      description: 'The set of data to be injected into a Service Provider system under test for a single flight.'
      required:
        - injection_id
        - telemetry
        - details_responses
      type: object
      properties:
        injection_id:
          description: 'ID of the injected test flight.  Remains the same regardless of the flight ID/UTM ID reported in the system.'
          type: string
          example: 'edb7695f-8737-4b9f-91f8-e2afbb333f41'
        telemetry:
          description: >-
            The set of telemetry data that should be injected into the system for this flight.
            Each element follows the RIDAircraftState schema from the ASTM remote ID standard.
          type: array
          items:
            $ref: '#/components/schemas/RIDAircraftState'
        details_responses:
          description: The details of the flight as a function of time.
          type: array
          items:
            $ref: '#/components/schemas/TestFlightDetails'
    TestFlightDetails:
      description: The set of data with which the Service Provider system under test should respond when queried for the details of a test flight.
      required:
        - effective_after
        - details
      type: object
      properties:
        effective_after:
          description: >-
            The time after which the Service Provider system under test should respond with `details`, unless other `details` with a more recent `effective_after` time (before the current time) are available.
          type: string
          format: datetime
        details:
          description: >-
            The details of the flight.
            Follows the RIDOperatorDetails schema from the ASTM remote ID standard.
          $ref: '#/components/schemas/RIDOperatorDetails'


    GeoAwarenessStatusResponse:
      type: object
      required:
        - status
      properties:
        status:
          description: >-
            The status of the USS automated testing interface.

            - `Starting`: the USS is starting and the automated test driver should wait before sending requests.

            - `Ready`: the USS is ready to receive test requests.
          type: string
          enum: [Starting, Ready]
          example: Ready
        version:
          description: |-
            Arbitrary string representing the version of the USS system to be tested.
          type: string
          example: v0.0.1-445ad3

    CreateGeozoneSourceRequest:
      type: object
      properties:
        https_source:
          $ref: '#/components/schemas/GeozoneHttpsSource'

    GeozoneHttpsSource:
      type: object
      required:
        - url
      properties:
        url:
          type: string
          format: url
          description: The URL at which the Geozone data shall be downloaded from.
          example: https://caa.example.com/geozones.json
        format:
          type: string
          description: The format of the response expected from the source.
          enum: [ED-269]
          example: ED-269

    GeozoneSourceResponse:
      type: object
      required:
        - result
      properties:
        result:
          description: >-
            The status of the Geozone source and the handling of its data by the USS.

            - `Activating`: the USS is processing the request and is currently activating the Geozone data.

            - `Ready`: the Geozone data has been successfully activated and the USS is ready to receive test requests.

            - `Deactivating`: the Geozone data is being deactivated.

            - `Unsupported`: the USS cannot process the dataset type specified.

            - `Rejected`: the Geozone data was rejected because it is invalid.

            - `Error`: the Geozone data activation or deactivation failed. The message field is required in this case.
          type: string
          enum: [Activating, Ready, Deactivating, Unsupported, Rejected, Error]
          example: Ready
        message:
          description: Human-readable explanation of the result for debugging purpose only. This field is required when the result value is `Error`.
          type: string
          example: |-
            Unable to download the dataset https://caa.example.com/geozones.json. Connection refused.
    UserNotification:
      type: object
      description: Notification observed by virtual user.
      required:
        - observed_at
      properties:
        observed_at:
          anyOf:
            - $ref: '#/components/schemas/Time'
          description: Time at which the virtual user observed the notification.
        message:
          description: Message presented to the user, description of notification, or other means of helping identify the nature of the notification, for the purpose of increased readability of test reports.
          type: string
    QueryUserNotificationsResponse:
      type: object
      description: Response object for query request for notifications observed by the virtual user.
      required:
        - user_notifications
      properties:
        user_notifications:
          description: List of applicable observed user notifications.
          type: array
          items:
            $ref: '#/components/schemas/UserNotification'

    #######################################################################
    #################### Start of ED-269 definitions    ###################
    #######################################################################

    UomDimensions:
      type: string
      enum:
        - M
        - FT

    VerticalReferenceType:
      type: string
      enum:
        - AGL
        - AMSL

    USpaceClass:
      type: string
      maxLength: 100

    Restriction:
      type: string
      enum:
        - PROHIBITED
        - REQ_AUTHORISATION
        - CONDITIONAL
        - NO_RESTRICTION

    #######################################################################
    #################### END of ED-269 definitions    #####################
    #######################################################################

    GeoAwarenessPosition:
      type: object
      required:
        - uomDimensions
        - verticalReferenceType
      properties:
        uomDimensions:
          $ref: '#/components/schemas/UomDimensions'
        verticalReferenceType:
          $ref: '#/components/schemas/VerticalReferenceType'
        height:
          description: >-
            Height above vertical reference datum indicated in `verticalReferenceType`, in units of `uomDimensions`.
          type: number
          default: 0
        longitude:
          description: >-
            Longitude, degrees east of prime meridian.
          type: number
          default: 0
        latitude:
          description: >-
            Latitude, degrees north of the equator.
          type: number
          default: 0

    GeozonesCheckRequest:
      type: object
      required:
        - checks
      properties:
        checks:
          type: array
          items:
            $ref: '#/components/schemas/GeozonesCheck'

    GeozonesCheck:
      type: object
      required:
        - filterSets
      properties:
        filterSets:
          description: >-
            Select Geozones which match any of the specified filter sets.
          type: array
          items:
            $ref: '#/components/schemas/GeozonesFilterSet'

    GeozonesFilterSet:
      description: >-
        Set of filters to select only a subset of Geozones.  Only Geozones which are applicable to all specified filters within this filter set should be selected.
      type: object
      properties:
        position:
          description: >-
            If specified, only select Geozones encompassing this position.
          anyOf:
            - $ref: '#/components/schemas/GeoAwarenessPosition'
        after:
          description: >-
            If specified, only select Geozones which encompass at least some times at or after this time.
          type: string
          format: date-time
        before:
          description: >-
            If specified, only select Geozones which encompass at least some times at or before this time.
          type: string
          format: date-time
        ed269:
          $ref: '#/components/schemas/ED269Filters'

    ED269Filters:
      description: >-
        Filter criteria for the selection of Geozones according to ED-269 characteristics.
      type: object
      properties:
        uSpaceClass:
          description: >-
            If specified, only select Geozones which are of the specified `uSpaceClass`.
          anyOf:
            - $ref: '#/components/schemas/USpaceClass'
        acceptableRestrictions:
          description: >-
            If specified and non-empty, only select Geozones which are one of the specified restriction types.
          type: array
          items:
            $ref: '#/components/schemas/Restriction'

    GeozonesCheckReply:
      type: object
      properties:
        applicableGeozone:
          description: >-
            Responses to each of the `checks` in the request.  The number of entries in this array should match the number of entries in the `checks` field of the request.
          type: array
          items:
            $ref: '#/components/schemas/GeozonesCheckResult'
          default: []

    GeozonesCheckResult:
      type: object
      required:
      - geozone
      properties:
        geozone:
          type: string
          description: >-
            Indication of whether one or more applicable Geozones were selected according to the selection criteria of the corresponding check.

            * Present: One or more applicable Geozones were selected.
            * Absent: No applicable Geozones were selected.
            * UnsupportedFilter: Applicable Geozones could not be selected because one or more filter criteria are not supported by the USSP.  If this value is specified, `message` must be populated.
            * Error: An error or condition not enumerated above occurred.  If this value is specified, `message` must be populated.
          enum:
          - Present
          - Absent
          - UnsupportedFilter
          - Error
        message:
          type: string
          description: >-
            A human-readable description of why the non-standard `geozone` value was reported.  Should only be populated when appropriate according to the value of the `geozone` field.
          example: >-
            U-space flight authorisations are not blocked by the USSP according to geo-awareness data (GM1 Article 10 (7)).

    ErrorReport:
      type: object
      description: A report informing a server of a communication problem.
      required:
      - exchange
      properties:
        report_id:
          type: string
          maxLength: 128
          description: >-
            ID assigned by the server receiving the report.  Not populated when
            submitting a report.
        exchange:
          anyOf:
          - $ref: '#/components/schemas/ExchangeRecord'
          description: >-
            The request (by this USS) and response associated with the error.

    ExchangeRecord:
      type: object
      description: Details of a request/response data exchange.
      required:
      - url
      - method
      - recorder_role
      - request_time
      - request_source
      properties:
        url:
          type: string
          description: Full URL of request.
        method:
          type: string
          description: HTTP verb used by requester (e.g., "PUT," "GET," etc.)
        headers:
          description: >-
            Set of headers associated with request or response. Requires
            'Authorization:' field (at a minimum)
          type: array
          items:
            type: string
          default: [ ]
        recorder_role:
          type: string
          description: >-
            A coded value that indicates the role of the logging USS: 'Client'
            (initiating a request to a remote USS) or 'Server' (handling a
            request from a remote USS)
          enum:
          - Client
          - Server
        request_time:
          description: The time at which the request was sent/received.
          anyOf:
          - $ref: '#/components/schemas/Time'
        request_body:
          description: Base64-encoded body content sent/received as a request.
          type: string
          default: ''
        response_time:
          description: The time at which the response was sent/received.
          anyOf:
          - $ref: '#/components/schemas/Time'
        response_body:
          type: string
          default: ''
          description: >-
            Base64-encoded body content sent/received in response to request.
        response_code:
          type: integer
          format: int32
          default: 0
          description: HTTP response code sent/received in response to request.
        problem:
          type: string
          description: >-
            'Human-readable description of the problem with the exchange, if any.'

tags:
  - name: uss
    description: Flight Blender enables connections with the DSS for ASTM-compliant Remote-ID data. These endpoints cover creating DSS subscriptions, submitting operational intents, and querying Remote-ID data and operational intents for a given area.
  - name: rid-qualifier
    description: Endpoints for the RID Qualifier test suite, which verifies compliance with ASTM Remote-ID standards by implementing the Observation API required for automated testing.
  - name: flight-planning-qualifier
    description: Flight Blender enables integration with the USSP software testing framework (InterUSS) for Remote ID and Strategic Deconfliction. These endpoints implement the strategic deconfliction test framework APIs for automated compliance testing.
  - name: rid
    description: Flight Blender enables integration with the DSS for ASTM-compliant Remote-ID data. These endpoints cover creating DSS subscriptions, submitting operational intents, and querying Remote-ID data and operational intents for a given area.
  - name: air-traffic
    description: Integrate air traffic data from sensors (e.g., ADS-B, FLARM) into Flight Blender. Flight Blender normalizes this data and makes it available to display applications and other API endpoints. Use these endpoints to submit or query air traffic data.
  - name: flight-declarations
    description: Endpoints for submitting, reviewing, and managing flight declarations and operational intents in Flight Blender. Use these APIs to create, approve, update, or delete flight declarations, and to query their status or details.
  - name: geo-fence
    description: Submit geo-fences as GeoJSON to Flight Blender. Flight Blender will automatically convert the GeoJSON to an ED-269-compliant geofence in the background. Use these endpoints to manage geo-fences in Flight Blender.
  - name: geozone-qualifier
    description: Endpoints for the InterUSS monitoring test suite, which verify compliance with ED-269 geozone requirements under EU U-Space regulations. These APIs interact with the qualifier test suite to test geozone handling and compliance.
  - name: telemetry
    description: Flight Blender allows GCS and trackers to submit telemetry data. Use these endpoints to send telemetry observations for processing and integration with other Flight Blender services.
  - name: message-signing-verification
    description: Flight Blender provides security features for signing requests and responses. These endpoints allow you to manage public keys used to verify signed messages both within Flight Blender and in external environments.
  - name: surveillance-sdsp
    description: Endpoints for managing surveillance monitoring tasks, including starting and stopping heartbeat tracking. Use these APIs to monitor the status of surveillance systems and ensure compliance with monitoring requirements and compliance to ASTM 3623-22.